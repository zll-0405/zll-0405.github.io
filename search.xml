<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[运维] proxmox ve 与 vSphere 对比</title>
      <link href="/posts/f77b1752.html"/>
      <url>/posts/f77b1752.html</url>
      
        <content type="html"><![CDATA[<p><font face="华文中宋" size="3">一直关注我的博友,应该知道我曾经捣鼓过 vSphere 相关的内容,写过一个专栏: <a href="https://blog.csdn.net/zll_0405/column/info/21107" target="_blank" rel="noopener">VMware vSphere</a> ,起码有些许的成绩了,支撑起了公司大大小小的项目,虽然出过问题,但最后都有惊无险的熬了过来.<br><a id="more"></a><br>也算是基于兴趣,对这方面一直都有关注.前几天,贺信找到我,说发现了一个可以尝试的系统软件: proxmox ve (为了方便,下面我就写 proxmox 系统了).<br>在了解它之后,发现这个系统软件还真的不错,后期看看能不能推进一下这个方案,争取把这个方案落地.</font></p><p><font face="华文中宋" size="3">为什么想要推进这个方案,让它落地呢.我主要有以下几点考虑:<br>1 , proxmox ve 是开源的,而 vSphere 是收费的.<br>开源和收费,我觉得都没多大关系,只要符合自己公司当前发展的需求,我觉得付费也是 OK 的.但是开源的在于,它的氛围很不错,而且我看了一下,遇到的问题都有人写出过解决方案,这一点我是很看好的.(不过大部分解决方案都是英文,说明了英语的重要性)<br>vSphere 产品遇到问题的时候,一般查找不到相关解决资料,都是自己各种尝试,不知道哪儿懵对了,机器就好了,排查问题的时候,真的是靠个人经验.这一点,从我博客里面就能看出来,访问量最多的就是写 vSphere 的那几篇文章.说明在这方面沉淀的人少,所以搜索引擎把我的文章推出来.<br>而 proxmox ve 是开源的,这样就比较能够放心让别人大胆尝试,不至于遇到问题的时候,总是那几个人上,每个人都有锻炼的机会.<br>当然了,如果你真的比较土豪,购买 proxmox ve 系统也是 OK 的.</font></p><p><font face="华文中宋" size="3">2 , proxmox 虚拟机使用的是 kvm ,容器则使用的是 LXC( Linux Container ),也就是说,容器这方面相当于原生的,对于各类常见的应用软件容器,就不用再单独创建 Linux 虚拟机,可以直接在虚拟机上安装相关容器即可.<br>但是 proxmox 对物理服务器的限制是设定在 32 台物理主机,所以如果物理主机比较多的话,而且还需要统一集中在一个集群管理,它可能就不是最好的解决方案了.<br>但是就目前公司的需求来说,我觉得使用 proxmox 还是能够满足需求的.</font></p><p><font face="华文中宋" size="3">3 ,proxmox 支持市面上几乎所有的主流存储协议,特别是对 ceph 分布式存储的支持.这意味着,通过 ceph 可以实现虚拟机的 HA 功能,虚拟机动态迁移等高级特性,而且我觉得在以后,大数据是一个趋势,所以能够支持分布式存储的话,这一个优点无疑是比较吸引人的.</font></p><p><font face="华文中宋" size="3">4 , vSphere 出于商业收费和 license 的考虑,将很多功能进行了拆分,安装完 ESXi 之后,只能使用基本功能,如果想要使用高级功能,必须安装 vcenter 来进行相关操作才可以.<br>相比较之下, proxmox 就友好很多,安装完成之后,所有集群的物理节点都是平等的,通过每个物理节点都可以管理整个集群.<br>如果只是从稳定性来看的话, proxmox ve 和 vSphere 可以说是旗鼓相当,但是硬件兼容性则没有 proxmox 好,而且在 proxmox 中没有主次节点之分,所以它能够最大化的提高硬件的使用效率.</font></p><p><font face="华文中宋" size="3">5 ,这是最重要的一个原因: proxmox 相对于 vSphere 来说,它少了一层.<br>vSphere 的架构是:在服务器上安装 ESXi 系统,然后通过 vcenter 去管理,通过 vcenter 来创建虚拟机,管理集群等.<br>而 proxmox 架构是:在服务器上安装 proxmox 系统之后,就可以在上面创建虚拟机,随便访问一台物理节点,都可以来管理整个集群.<br>发现不同了嘛?好吧,我觉得你可能没发现.<br>proxmox 不需要经过 vcenter 这一层的管理,也就是少了一层通信.这一层通信少了之后,就可能将整个集群的读取速度,反应速度提升一个层次.<br>如果非要举个例子来说明的话(这个例子可能不太恰当,但是想不起来合适的了),就相当于你的笔记本从原来用机械硬盘,到后来改用固态,那种速度之间的差别,你可以想想.</font></p><p><font face="华文中宋" size="3">基于以上吧,我个人是觉得这个方案可以尝试去做.<br>后期看时间和精力,看看能不能弄起来.</font></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxmox ve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[java]说说 JRE , JDK , JVM 三者之间的区别与联系</title>
      <link href="/posts/dfd14d26.html"/>
      <url>/posts/dfd14d26.html</url>
      
        <content type="html"><![CDATA[<p><font face="华文中宋" size="3">在写了很多代码之后,如果问 jre 和 jdk 之间有什么关系, jvm 又是什么,估计有相当一部分人不知道在说什么.所以这篇文章,就尝试解释一下这三者之间的区别和联系.<br><a id="more"></a></font></p><table><tr><td bgcolor="#1E90FF"><font face="楷体" color="white" size="5">基本概念</font></td></tr></table><p><font face="华文中宋" size="3">咱们先来说说, jvm , jre , jdk 都是什么.</font></p><p><font face="华文中宋" size="5">JVM ( Java Virtual Machine ):</font></p><p><font face="华文中宋" size="3">就是常说的 java 虚拟机,顾名思义,它就是一个虚拟出来的计算机,通过在实际的计算机上模拟各种计算机功能来实现.<br>JVM 是 java 实现跨平台最核心的部分,所有的 java 程序,首先会被编译成 .class 的类文件, JVM 的主要工作是解释自己的指令集(即字节码)并映射到本地的 CPU 的指令集或 OS 的系统调用. java 面对不同操作系统使用不同的虚拟机,这样实现了跨平台.<br>因为 JVM 对上层的 java 源文件怎样是不关心的,它关心的是由源文件生成的类文件.</font></p><p><font face="华文中宋" size="5">JRE ( Java Runtime Environment ):</font></p><p><font face="华文中宋" size="3">java 运行时环境.<br>它主要包括两部分: jvm 的标准实现和 java 的一些基本类库还有一些模块等.<br>在 java 平台下,所有的 java 程序都需要在 JRE 下才能运行,这是因为在解释 class 时, JVM 需要调用解释所需要的类库 lib .<br>可以看看自己下载的 jre ,里面有 bin 和 lib , 在这里可以认为 bin 就是 JVM , lib 就是 JVM 所需要的类库. JVM 和 lib 合起来就称为 JRE .</font></p><p><font face="华文中宋" size="5">JDK (Java Development Kit ):</font></p><p><font face="华文中宋" size="3"> java 开发工具包.<br>jdk 是整个 java 开发的核心,包括了 java 的运行环境,一堆 java 工具和 java 基础的类库.你可以将 JDK 看成是 JRE 的一个超集.<br>由上,我们能够看出来,这三者之间的关系是层层嵌套的:<strong> JDK 包含 JRE , 而 JRE 包含 JVM .</strong></font></p><table><tr><td bgcolor="#1E90FF"><font face="楷体" color="white" size="5">Q &amp; A</font></td></tr></table><p><font face="华文中宋" size="3">在以上基础上,面试的时候,就有的问了.<br>比如:<br>Q : java 为什么能够跨平台,实现” write once , run anywhere “<br>A : java 能够跨平台运行的核心在于 jvm ,所以并不是 java 能够跨平台,而是它的 jvm 可以做到跨平台.<br>java 引入了字节码的概念, jvm 只认识字节码,并将它们解释到系统的 API 调用.不同的系统有不同的 jvm 实现,有 Linux 版本的 jvm 实现,也有 Windows 版本的 jvm 实现,但是同一段代码在编译后的字节码是一样的.<br>也就是说,我想要实现的功能,因为编译生成的字节码是唯一的,所以和系统无关,因为在不同的 jvm 实现上会映射到不同系统的 API 调用,从而实现了代码不做任何修改,就可以跨平台运行.</font></p><p><font face="华文中宋" size="3">Q : jdk 和 jre 有什么区别<br>A : 把&lt;基本概念&gt;里面的内容说说,然后再说一下在实际中:如果只是想跑 java 程序,只安装 jre 就可以了,如果想要写 java 程序并且运行,就需要 jdk .</font></p><p><font face="华文中宋" size="3">如果能够玩转 jre  , jdk , jvm ,你就可以骄傲的说,你有扎实的 java 基础了.<br>在这里推荐两篇博客,好好阅读,会有很多收获.<br><a href="http://www.cnblogs.com/zuoxiaolong/p/life51.html" target="_blank" rel="noopener">回答阿里社招面试如何准备，顺便谈谈对于Java程序猿学习当中各个阶段的建议</a><br><a href="http://www.cnblogs.com/zuoxiaolong/p/life53.html" target="_blank" rel="noopener">万能的林萧说：一篇文章教会你，如何做到招聘要求中的“要有扎实的Java基础”。</a></font></p><p><font face="华文中宋" size="3">感谢您的阅读~</font></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Linux]时间同步设置 + 防火墙设置 + SELinux 设置</title>
      <link href="/posts/d1d9f7bd.html"/>
      <url>/posts/d1d9f7bd.html</url>
      
        <content type="html"><![CDATA[<table><tr><td bgcolor="navy" blue><font face="楷体" color="white" size="5"> 时间同步设置</font></td></tr></table><p><font face="华文中宋" size="3">在大数据集群环境中，要求每台集群的时间必须是同步的，这样我们就会要求每台集群的时间必须和一台服务的时间是同步的。接下来介绍一下步骤：<br><a id="more"></a><br>1，设置ntp客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp 安装ntp时间同步软件</span><br><span class="line">systemctl enable ntpd 使软件可用</span><br><span class="line">systemctl start ntpd 启动ntp软件</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">2，编辑/etc/ntp.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ntp.conf</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">重点修改以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Use public servers from the pool.ntp.org project.</span><br><span class="line"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line"> </span><br><span class="line">server 192.168.243.133   -------&gt;（此处需要修改，以哪台为准就写那台的IP）</span><br><span class="line"> </span><br><span class="line">restrict 192.168.243.133 nomodify notrap noquery-------&gt;（此处需要修改，以哪台为准就写那台的IP）</span><br><span class="line"> </span><br><span class="line">server 192.168.243.***     -------&gt;（本机IP是多少就写多少）</span><br><span class="line">fudge 192.168.243.*** -------&gt;（本机IP是多少就写多少） stratum 10</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">3，重启ntpd服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart ntpd</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">4，启动后，查看同步情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ntpq -p</span><br><span class="line">ntpstat</span><br></pre></td></tr></table></figure></font></p><table><tr><td bgcolor="navy" blue><font face="楷体" color="white" size="5"> 防火墙设置</font></td></tr></table><p><font face="华文中宋" size="3">关闭firewall：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">临时关闭防火墙: systemctl stop firewalld </span><br><span class="line">永久关闭防火墙： systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">关闭iptables：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关闭命令： service iptables stop </span><br><span class="line">永久关闭防火墙：chkconfig iptables off </span><br><span class="line">检查防火墙状态：service iptables status</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">查看防火墙状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查firewall的状态：systemctl status firewalld.service</span><br><span class="line">检查iptables状态：service iptables status</span><br></pre></td></tr></table></figure></font></p><table><tr><td bgcolor="navy" blue><font face="楷体" color="white" size="5"> SELinux设置</font></td></tr></table><p><font face="华文中宋" size="3">1，临时关闭SELinux：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">2，永久关闭SELinux：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line">将配置文件中SELINUX=enforcing改为SELINUX=disabled</span><br><span class="line">注：修改配置文件需要重启机器，但我们已临时关闭SELinux，等下次机器重启后，配置文件自动生效</span><br></pre></td></tr></table></figure></font></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
