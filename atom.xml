<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑璐璐|个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.dynamic-zheng.com/"/>
  <updated>2020-05-03T07:53:01.276Z</updated>
  <id>https://www.dynamic-zheng.com/</id>
  
  <author>
    <name>郑璐璐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Java 并发] AQS 是个啥?</title>
    <link href="https://www.dynamic-zheng.com/posts/c1cacb19.html"/>
    <id>https://www.dynamic-zheng.com/posts/c1cacb19.html</id>
    <published>2020-05-03T07:50:36.000Z</published>
    <updated>2020-05-03T07:53:01.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><font face="华文中宋" size="3">基本概念</font></h1><p><font face="华文中宋" size="3">AQS 是 <code>AbstractQueuedSynchronizer</code> 的简称,翻译成中文就是 <code>抽象队列同步器</code> ,这三个单词分开来看:<br><a id="more"></a></font></p><ul><li><font face="华文中宋" size="3">Abstract (抽象):也就是说, AQS 是一个抽象类,只实现一些主要的逻辑,有些方法推迟到子类实现</font></li><li><font face="华文中宋" size="3">Queued (队列):队列有啥特征呢?先进先出( FIFO )对吧?也就是说, AQS 是用先进先出队列来存储数据的</font></li><li><font face="华文中宋" size="3">Synchronizer (同步):即 AQS 实现同步功能</font></li></ul><p><font face="华文中宋" size="3">以上概括一下, AQS 是一个用来构建锁和同步器的框架,使用 AQS 能简单而又高效地构造出同步器.</font></p><h1 id="AQS-内部实现"><a href="#AQS-内部实现" class="headerlink" title="AQS 内部实现"></a><font face="华文中宋" size="3">AQS 内部实现</font></h1><p><font face="华文中宋" size="3">AQS 队列在内部维护了一个 FIFO 的双向链表,如果对数据结构比较熟的话,应该很容易就能想到,在双向链表中,每个节点都有两个指针,分别指向直接前驱节点和直接后继节点.使用双向链表的优点之一,就是从任意一个节点开始都很容易访问它的前驱节点和后继节点.<br>在 AQS 中,每个 Node 其实就是一个线程封装,当线程在竞争锁失败之后,会封装成 Node 加入到 AQS 队列中;获取锁的线程释放锁之后,会从队列中唤醒一个阻塞的 Node (也就是线程)<br>AQS 使用 volatile 的变量 state 来作为资源的标识:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">关于 state 状态的读取与修改,子类可以通过覆盖 <code>getState()</code> 和 <code>setState()</code> 方法来实现自己的逻辑,其中比较重要的是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入期望值 expect ,想要修改的值 update ,然后通过 Unsafe 的 compareAndSwapInt() 即 CAS 操作来实现</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">下面是 AQS 中两个重要的成员变量:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;   <span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;   <span class="comment">// 尾节点</span></span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">关于 AQS 维护的双向链表,在源码中是这样解释的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The wait queue is a variant of a <span class="string">"CLH"</span> (Craig, Landin, and Hagersten) lock queue. </span><br><span class="line">CLH locks are normally used <span class="keyword">for</span> spinlocks.  We instead use them <span class="keyword">for</span> blocking synchronizers, </span><br><span class="line">but use the same basic tactic of holding some of the control information </span><br><span class="line">about a thread in the predecessor of its node.</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">也就是 AQS 的等待队列是 “CLH” 锁定队列的变体<br>直接来一张图会更形象一些(每次画图头发都会掉不少,所以原来我这种不会配色的人,逃;):</font></p><p><img src="/images/2020/AQS数据结构.jpg"></p><p><font face="华文中宋" size="3">Node 节点维护的是线程,控制线程的一些操作,具体来看看是 Node 是怎么做的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class="line">    <span class="comment">// 标记一个节点,在 共享模式 下等待</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class="line">    <span class="comment">// 标记一个节点,在 独占模式 下等待</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line">    <span class="comment">// waitStatus 的值,表示该节点从队列中取消</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class="line">    <span class="comment">// waitStatus 的值,表示后继节点在等待唤醒</span></span><br><span class="line">    <span class="comment">// 只有处于 signal 状态的节点,才能被唤醒</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line">    <span class="comment">// waitStatus 的值,表示该节点在等待一些条件</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment">     * unconditionally propagate</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// waitStatus 的值,表示有资源可以使用,新 head 节点需要唤醒后继节点</span></span><br><span class="line">    <span class="comment">// 如果是在共享模式下,同步状态应该无条件传播下去</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点状态,取值为 -3,-2,-1,0,1</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前驱节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后继节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点所对应的线程</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">// condition 队列中的后继节点</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是共享模式</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回前驱节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        Node p = prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将线程构造成一个 Node 节点,然后添加到 condition 队列中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 等待队列用到的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><h1 id="AQS-如何获取资源"><a href="#AQS-如何获取资源" class="headerlink" title="AQS 如何获取资源"></a><font face="华文中宋" size="3">AQS 如何获取资源</font></h1><p><font face="华文中宋" size="3">在 AQS 中,获取资源的入口是 <code>acquire(int arg)</code> 方法,其中 arg 是获取资源的个数,来看下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">在获取资源时,会首先调用 <code>tryAcquire</code> 方法,这个方法是在子类中具体实现的<br>如果通过 <code>tryAcquire</code> 获取资源失败,接下来会通过 <code>addWaiter(Node.EXCLUSIVE)</code> 方法,将这个线程插入到等待队列中,具体代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 生成该线程所对应的 Node 节点</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// 将 Node 插入到队列中</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// 使用 CAS 操作,如果成功就返回</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果 pred == null 或者 CAS 操作失败,则调用 enq 方法再次自旋插入</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自旋 CAS 插入等待队列</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">在上面能够看到使用的是 CAS 自旋插入,这是因为在 AQS 中会存在多个线程同时竞争资源的情况,进而一定会出现多个线程同时插入节点的操作,这里使用 CAS 自旋插入是为了保证操作的线程安全性<br>现在呢,申请 <code>acquire(int arg)</code> 方法,然后通过调用 <code>addWaiter</code> 方法,将一个 Node 插入到了队列尾部.处于等待队列节点是从头结点开始一个一个的去获取资源,获取资源方式如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="comment">// 如果 Node 的前驱节点 p 是 head,说明 Node 是第二个节点,那么它就可以尝试获取资源</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">            <span class="comment">// 如果资源获取成功,则将 head 指向自己</span></span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 节点进入等待队列后,调用 shouldParkAfterFailedAcquire 或者 parkAndCheckInterrupt 方法</span></span><br><span class="line">            <span class="comment">// 进入阻塞状态,即只有头结点的线程处于活跃状态</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">在获取资源时,除了 <code>acquire</code> 之外,还有三个方法:</font></p><ul><li><font face="华文中宋" size="3">acquireInterruptibly :申请可中断的资源(独占模式)</font></li><li><font face="华文中宋" size="3">acquireShared :申请共享模式的资源</font></li><li><font face="华文中宋" size="3">acquireSharedInterruptibly :申请可中断的资源(共享模式)</font></li></ul><p><font face="华文中宋" size="3">到这里,关于 AQS 如何获取资源就说的差不多了,接下来看看 AQS 是如何释放资源的</font></p><h1 id="AQS-如何释放资源"><a href="#AQS-如何释放资源" class="headerlink" title="AQS 如何释放资源"></a><font face="华文中宋" size="3">AQS 如何释放资源</font></h1><p><font face="华文中宋" size="3">释放资源相对于获取资源来说,简单了很多.源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="comment">// 如果状态是负数,尝试将它改为 0</span></span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 得到头结点的后继节点</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="comment">// 如果 waitStatus 大于 0 ,说明这个节点被取消</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将等待队列中所有还在用的节点,统一向前移动</span></span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果后继节点不为空,则将其从阻塞状态变为非阻塞状态</span></span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><h1 id="AQS-两种资源共享模式"><a href="#AQS-两种资源共享模式" class="headerlink" title="AQS 两种资源共享模式"></a><font face="华文中宋" size="3">AQS 两种资源共享模式</font></h1><p><font face="华文中宋" size="3">资源有两种共享模式:</font></p><ul><li><font face="华文中宋" size="3">独占模式( Exclusive ):资源是独占的,也就是一次只能被一个线程占有,比如 ReentrantLock</font></li><li><font face="华文中宋" size="3">共享模式( Share ):同时可以被多个线程获取,具体的资源个数可以通过参数来确定,比如 Semaphore/CountDownLatch </font></li></ul><p><font face="华文中宋" size="3">这一点,在刚开始介绍的 Node 节点源码那部分应该就能看到了.之所以把这部分内容写在后面,是想回头写几篇文章去分析一下 ReentrantLock/Semaphore/CountDownLatch (如果我有时间 + 不偷懒的话</font></p><p><font face="华文中宋" size="3">以上,感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;基本概念&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;AQS 是 &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; 的简称,翻译成中文就是 &lt;code&gt;抽象队列同步器&lt;/code&gt; ,这三个单词分开来看:&lt;br&gt;
    
    </summary>
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[Java 并发]深入浅出 synchronized 与锁</title>
    <link href="https://www.dynamic-zheng.com/posts/c8ca8c17.html"/>
    <id>https://www.dynamic-zheng.com/posts/c8ca8c17.html</id>
    <published>2020-05-02T09:21:29.000Z</published>
    <updated>2020-05-02T09:34:14.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a><font face="华文中宋" size="3">synchronized 关键字</font></h1><p><font face="华文中宋" size="3">说到锁,都会提 synchronized .这个英文单词儿啥意思呢?翻译成中文就是「同步」的意思<br>一般都是使用 synchronized 这个关键字来给一段代码或者一个方法上锁,使得这段代码或者方法,在同一个时刻只能有一个线程来执行它.<br><a id="more"></a><br>synchronized 相比于 volatile 来说,用的比较灵活,你可以在方法上使用,可以在静态方法上使用,也可以在代码块上使用.<br>关于 synchronized 这一块大概就说到这里,我想着重来说一下, synchronized 底层是怎么实现的</font></p><h2 id="JVM-是如何实现-synchronized-的"><a href="#JVM-是如何实现-synchronized-的" class="headerlink" title="JVM 是如何实现 synchronized 的?"></a><font face="华文中宋" size="3">JVM 是如何实现 synchronized 的?</font></h2><p><font face="华文中宋" size="3">我知道可以利用 synchronized 关键字来给程序进行加锁,但是它具体怎么实现的我不清楚呀,别急,咱们先来看个 demo :</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedDemo</span><span class="params">(Object lock)</span></span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">lock.hashCode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">上面是我写的一个 demo ,然后进入到 class 文件所在的目录下,使用 <code>javap -v demo.class</code> 来看一下编译的字节码(在这里我截取了一部分):</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedDemo</span><span class="params">(java.lang.Object)</span></span>;</span><br><span class="line">  descriptor: (Ljava/lang/Object;)V</span><br><span class="line">  flags: ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">2</span></span><br><span class="line">       <span class="number">0</span>: aload_1</span><br><span class="line">       <span class="number">1</span>: dup</span><br><span class="line">       <span class="number">2</span>: astore_2</span><br><span class="line">       <span class="number">3</span>: monitorenter</span><br><span class="line">       <span class="number">4</span>: aload_1</span><br><span class="line">       5: invokevirtual #2                  // Method java/lang/Object.hashCode:()I</span><br><span class="line">       <span class="number">8</span>: pop</span><br><span class="line">       <span class="number">9</span>: aload_2</span><br><span class="line">      <span class="number">10</span>: monitorexit</span><br><span class="line">      <span class="number">11</span>: goto          <span class="number">19</span></span><br><span class="line">      <span class="number">14</span>: astore_3</span><br><span class="line">      <span class="number">15</span>: aload_2</span><br><span class="line">      <span class="number">16</span>: monitorexit</span><br><span class="line">      <span class="number">17</span>: aload_3</span><br><span class="line">      <span class="number">18</span>: athrow</span><br><span class="line">      <span class="number">19</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">4</span>    <span class="number">11</span>    <span class="number">14</span>   any</span><br><span class="line">          <span class="number">14</span>    <span class="number">17</span>    <span class="number">14</span>   any</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">应该能够看到当程序声明 synchronized 代码块时,编译成的字节码会包含 monitorenter 和 monitorexit 指令,这两种指令会消耗操作数栈上的一个引用类型的元素(也就是 synchronized 关键字括号里面的引用),作为所要加锁解锁的锁对象.如果看的比较仔细的话,上面有一个 monitorenter 指令和两个 monitorexit 指令,这是 Java 虚拟机为了确保获得的锁不管是在正常执行路径,还是在异常执行路径上都能够解锁.</font></p><p><font face="华文中宋" size="3">关于 monitorenter 和 monitorexit ,可以理解为每个锁对象拥有一个锁计数器和一个指向持有该锁的线程指针:</font></p><ul><li><font face="华文中宋" size="3">当程序执行 monitorenter 时,如果目标锁对象的计数器为 0 ,说明这个时候它没有被其他线程所占有,此时如果有线程来请求使用, Java 虚拟机就会分配给该线程,并且把计数器的值加 1<ul><li><font face="华文中宋" size="3">目标锁对象计数器不为 0 时,如果锁对象持有的线程是当前线程, Java 虚拟机可以将其计数器加 1 ,如果不是呢?那很抱歉,就只能等待,等待持有线程释放掉</font></li></ul></font></li><li><font face="华文中宋" size="3">当执行 monitorexit 时, Java 虚拟机就将锁对象的计数器减 1 ,当计数器减到 0 时,说明这个锁就被释放掉了,此时如果有其他线程来请求,就可以请求成功</font></li></ul><p><font face="华文中宋" size="3">为什么采用这种方式呢?是为了允许同一个线程重复获取同一把锁.<br>比如,一个 Java 类中拥有好多个 synchronized 方法,那这些方法之间的相互调用,不管是直接的还是间接的,都会涉及到对同一把锁的重复加锁操作.这样去设计的话,就可以避免这种情况.</font></p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a><font face="华文中宋" size="3">锁</font></h1><p><font face="华文中宋" size="3">在 Java 多线程中,所有的锁都是基于对象的.也就是说, Java 中的每一个对象都可以作为一个锁.你可能会有疑惑,不对呀,不是还有类锁嘛.但是 class 对象也是特殊的 Java 对象,所以呢,在 Java 中所有的锁都是基于对象的<br>在 Java6 之前,所有的锁都是”重量级”锁,重量级锁会带来一个问题,就是如果程序频繁获得锁释放锁,就会导致性能的极大消耗.为了优化这个问题,引入了”偏向锁”和”轻量级锁”的概念.所以在 Java6 及其以后的版本,一个对象有 4 种锁状态:无锁状态,偏向锁状态,轻量级锁状态,重量级锁状态.</font></p><p><font face="华文中宋" size="3">在 4 种锁状态中,无锁状态应该比较好理解,无锁就是没有锁,任何线程都可以尝试修改,所以这里就一笔带过了.</font></p><p><font face="华文中宋" size="3">随着竞争情况的出现,锁的升级非常容易发生,但是如果想要让锁降级,条件非常苛刻,有种你想来可以,但是想走不行的赶脚.</font></p><blockquote><p><font face="华文中宋" size="3">在这里啰嗦一句:很多文章说,锁如果升级之后是不能降级的,其实在 HotSpot JVM 中,是支持锁降级的</font></p><p><font face="华文中宋" size="3">锁降级发生在 Stop The World 期间,当 JVM 进入安全点的时候,会检查有没有闲置的锁,如果有就进行降级</font></p><p><font face="华文中宋" size="3">看到 Stop The World 和 安全点 可能有人比较懵,我这里简单说一下,具体还需要读者自己去探索一番.(因为这是 JVM 的内容,这篇文章的重点不是 JVM )</font></p><p><font face="华文中宋" size="3">在 Java 虚拟机里面,传统的垃圾回收算法采用的是一种简单粗暴的方式,就是 Stop-the-world ,而这个 Stop-the-world 就是通过安全点( safepoint )机制来实现的,安全点是什么意思呢?就是 Java 程序在执行本地代码时,如果这段代码不访问 Java 对象/调用 Java 方法/返回到原来的 Java 方法,那 Java 虚拟机的堆栈就不会发生改变,这就代表执行的这段本地代码可以作为一个安全点.当 Java 虚拟机收到 Stop-the-world 请求时,它会等所有的线程都到达安全点之后,才允许请求 Stop-the-world 的线程进行独占工作</font></p></blockquote><p><font face="华文中宋" size="3">接下来就介绍一下几种锁和锁升级</font></p><h2 id="Java-对象头"><a href="#Java-对象头" class="headerlink" title="Java 对象头"></a><font face="华文中宋" size="3">Java 对象头</font></h2><p><font face="华文中宋" size="3">在刚开始就说了, Java 的锁都是基于对象的,那是怎么告诉程序我是个锁呢?就不得不来说, Java 对象头<br>每个 Java 对象都有对象头,如果是非数组类型,就用 2 个字宽来存储对象头,如果是数组,就用 3 个字宽来存储对象头.在 32 位处理器中,一个字宽是 32 位;在 64 位处理器中,字宽就是 64 位咯~对象头的内容就是下面这样:</font></p><table><thead><tr><th style="text-align:center">长度</th><th style="text-align:center">内容</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">32/64 bit</td><td style="text-align:center">Mark Word</td><td style="text-align:center">存储对象的 hashCode 或锁信息等</td></tr><tr><td style="text-align:center">32/64 bit</td><td style="text-align:center">Class Metadata Address</td><td style="text-align:center">存储到对象类型数据的指针</td></tr><tr><td style="text-align:center">32/64 bit</td><td style="text-align:center">Array length</td><td style="text-align:center">数组的长度(如果是数组)</td></tr></tbody></table><p><font face="华文中宋" size="3">咱们主要来看 Mark Word 的内容:</font></p><table><thead><tr><th style="text-align:center">锁状态</th><th style="text-align:center">29 bit/61 bit</th><th style="text-align:center">1 bit 是否是偏向锁</th><th style="text-align:center">2 bit 锁标志位</th></tr></thead><tbody><tr><td style="text-align:center">无锁</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">01</td></tr><tr><td style="text-align:center">偏向锁</td><td style="text-align:center">线程 ID</td><td style="text-align:center">1</td><td style="text-align:center">01</td></tr><tr><td style="text-align:center">轻量级锁</td><td style="text-align:center">指向栈中锁记录的指针</td><td style="text-align:center">此时这一位不用于标识偏向锁</td><td style="text-align:center">00</td></tr><tr><td style="text-align:center">重量级锁</td><td style="text-align:center">指向互斥量(重量级锁)的指针</td><td style="text-align:center">此时这一位不用于标识偏向锁</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">GC 标记</td><td style="text-align:center"></td><td style="text-align:center">此时这一位不用于标识偏向锁</td><td style="text-align:center">11</td></tr></tbody></table><p><font face="华文中宋" size="3">从上面表格中,应该能够看到,是偏向锁时, <code>Mark Word</code> 存储的是偏向锁的线程 ID ;是轻量级锁时, <code>Mark Word</code> 存储的是指向线程栈中 <code>Lock Record</code> 的指针;是重量级锁时, <code>Mark Word</code> 存储的是指向堆中的 <code>monitor</code> 对象的指针</font></p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a><font face="华文中宋" size="3">偏向锁</font></h2><p><font face="华文中宋" size="3">HotSpot 的作者经过大量的研究发现,在大多数情况下,<strong>锁不仅不存在多线程竞争,而且总是由同一线程多次获得</strong><br>基于此,就引入了偏向锁的概念</font></p><p><font face="华文中宋" size="3">所以啥是偏向锁呢?用大白话说就是,我现在给锁设置一个变量,当一个线程请求的时候,发现这个锁是 <code>true</code> ,也就是说这个时候没有所谓的资源竞争,那也不用走什么加锁/解锁的流程了,直接拿来用就行.但是如果这个锁是 <code>false</code> 的话,说明存在其他线程竞争资源,那咱们再走正规的流程</font></p><h3 id="看一下具体的实现原理"><a href="#看一下具体的实现原理" class="headerlink" title="看一下具体的实现原理:"></a><font face="华文中宋" size="3">看一下具体的实现原理:</font></h3><p><font face="华文中宋" size="3">当一个线程第一次进入同步块时,会在对象头和栈帧中的锁记录中存储锁偏向的线程 ID .当下次该线程进入这个同步块时,会检查锁的 Mark Word 里面存放的是不是自己的线程 ID.如果是,说明线程已经获得了锁,那么这个线程在进入和退出同步块时,都不需要花费 CAS 操作来加锁和解锁;如果不是,说明有另外一个线程来竞争这个偏向锁,这时就会尝试使用 CAS 来替换 Mark Word 里面的线程 ID 为新线程的 ID .此时会有两种情况:</font></p><ul><li><font face="华文中宋" size="3">替换成功,说明之前的线程不存在了,那么 Mark Word 里面的线程 ID 为新线程的 ID ,锁不会升级,此时仍然为偏向锁</font></li><li><font face="华文中宋" size="3">替换失败,说明之前的线程仍然存在,那就暂停之前的线程,设置偏向锁标识为 0 ,并设置锁标志位为 00 ,升级为轻量级锁,按照轻量级锁的方式进行竞争锁</font></li></ul><h3 id="撤销偏向锁"><a href="#撤销偏向锁" class="headerlink" title="撤销偏向锁"></a><font face="华文中宋" size="3">撤销偏向锁</font></h3><p><font face="华文中宋" size="3">偏向锁使用了一种等到竞争出现时才释放锁的机制.也就说,如果没有人来和我竞争锁的时候,那么这个锁就是我独有的,当其他线程尝试和我竞争偏向锁时,我会释放这个锁<br>在偏向锁向轻量级锁升级时,首先会暂停拥有偏向锁的线程,重置偏向锁标识,看起来这个过程挺简单的,但是开销是很大的,因为:</font></p><ul><li><font face="华文中宋" size="3">首先需要在一个安全点停止拥有锁的线程</font></li><li><font face="华文中宋" size="3">然后遍历线程栈,如果存在锁记录的话,就需要修复锁记录和 Mark Word ,变成无锁状态</font></li><li><font face="华文中宋" size="3">最后唤醒被停止的线程,把偏向锁升级成轻量级锁</font></li></ul><p><font face="华文中宋" size="3">你以为就是升级一个轻量级锁?  too young too simple<br>偏向锁向轻量级锁升级的过程中,是非常耗费资源的,如果应用程序中所有的锁通常都处于竞争状态,偏向锁此时就是一个累赘,此时就可以通过 JVM 参数关闭偏向锁: <code>-XX:-UseBiasedLocking=false</code> ,那么程序默认会进入轻量级锁状态<br>最后,来张图吧~</font></p><p><img src="/images/2020/偏向锁.jpg"></p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a><font face="华文中宋" size="3">轻量级锁</font></h2><p><font face="华文中宋" size="3">如果多个线程在不同时段获取同一把锁,也就是不存在锁竞争的情况,那么 JVM 就会使用轻量级锁来避免线程的阻塞与唤醒</font></p><h3 id="轻量级锁加锁"><a href="#轻量级锁加锁" class="headerlink" title="轻量级锁加锁"></a><font face="华文中宋" size="3">轻量级锁加锁</font></h3><p><font face="华文中宋" size="3">JVM 会为每个线程在当前线程的栈帧中创建用于存储锁记录的空间,称之为 Displaced Mark Word .如果一个线程获得锁的时候发现是轻量级锁,就会将锁的 Mark Word 复制到自己的 Displaced Mark Word 中.之后线程会尝试用 CAS 将锁的 Mark Word 替换为指向锁记录的指针.<br>如果替换成功,当前线程获得锁,那么整个状态还是 <code>轻量级锁</code> 状态<br>如果替换失败了呢?说明 Mark Word 被替换成了其他线程的锁记录,那就尝试使用自旋来获取锁.(自旋是说,线程不断地去尝试获取锁,一般都是用循环来实现的)</font></p><p><font face="华文中宋" size="3">自旋是耗费 CPU 的,如果一直获取不到锁,线程就会一直自旋, CPU 那么宝贵的资源就这么被白白浪费了<br>解决这个问题最简单的办法就是指定自旋的次数,比如如果没有替换成功,那就循环 10 次,还没有获取到,那就进入阻塞状态<br>但是 JDK 采用了一个更加巧妙的方法—适应性自旋.就是说,如果这次线程自旋成功了,那我下次自旋次数更多一些,因为我这次自旋成功,说明我成功的概率还是挺大的,下次自旋次数就更多一些,那么如果自旋失败了,下次我自旋次数就减少一些,就比如,已经看到了失败的前兆,那我就先溜,而不是非要”不撞南墙不回头”</font></p><p><font face="华文中宋" size="3">自旋失败之后,线程就会阻塞,同时锁会升级成<strong>重量级锁</strong></font></p><h3 id="轻量级锁释放"><a href="#轻量级锁释放" class="headerlink" title="轻量级锁释放:"></a><font face="华文中宋" size="3">轻量级锁释放:</font></h3><p><font face="华文中宋" size="3">在释放锁时,当前线程会使用 CAS 操作将 Displaced Mark Word 中的内容复制到锁的 Mark Word 里面.如果没有发生竞争,这个复制的操作就会成功;如果有其他线程因为自旋多次导致轻量级锁升级成了重量级锁, CAS 操作就会失败,此时会释放锁同时唤醒被阻塞的过程</font></p><p><font face="华文中宋" size="3">同样,来一张图吧:</font></p><p><img src="/images/2020/轻量级锁及其膨胀.jpg"></p><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a><font face="华文中宋" size="3">重量级锁</font></h2><p><font face="华文中宋" size="3">重量级锁依赖于操作系统的互斥量( mutex )来实现.但是操作系统中线程间状态的转换需要相对比较长的时间(因为操作系统需要从用户态切换到内核态,这个切换成本很高),所以重量级锁效率很低,但是有一点就是,被阻塞的线程是不会消耗 CPU 的<br>每一个对象都可以当做一个锁,那么当多个线程同时请求某个对象锁时,它会怎么处理呢?<br>对象锁会设置集中状态来区分请求的线程:</font></p><blockquote><p><font face="华文中宋" size="3">Contention List:所有请求锁的线程将被首先放置到该竞争队列</font></p><p><font face="华文中宋" size="3">Entry List: Contention List 中那些有资格成为候选人的线程被移到 Entry List 中</font></p><p><font face="华文中宋" size="3">Wait Set:调用 wait 方法被阻塞的线程会被放置到 Wait Set 中</font></p><p><font face="华文中宋" size="3">OnDeck:任何时刻最多只能有一个线程正在竞争锁,该线程称为 OnDeck</font></p><p><font face="华文中宋" size="3">Owner:获得锁的线程称为 Owner</font></p><p><font face="华文中宋" size="3">!Owner:释放锁的线程</font></p></blockquote><p><font face="华文中宋" size="3">当一个线程尝试获得锁时,如果这个锁被占用,就会把该线程封装成一个 <code>ObjectWaiter</code> 对象插入到 Contention List 队列的队首,然后调用 <code>park</code> 函数挂起当前线程<br>当线程释放锁时,会从 Contention List 或者 Entry List 中挑选一个线程进行唤醒<br>如果线程在获得锁之后,调用了 <code>Object.wait</code> 方法,就会将该线程放入到 WaitSet 中,当被 <code>Object.notify</code> 唤醒后,会将线程从 WaitSet 移动到 Contention List 或者 Entry List 中.<br>但是,当调用一个锁对象的 <code>wait</code> 或 <code>notify</code> 方法时,<strong>如果当前锁的状态是偏向锁或轻量级锁,则会先膨胀成重量级锁</strong></font></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a><font face="华文中宋" size="3">总结:</font></h2><p><font face="华文中宋" size="3">synchronized 关键字是通过 monitorenter 和 monitorexit 两种指令来保证锁的<br>当一个线程准备获取共享资源时:</font></p><ul><li><font face="华文中宋" size="3">首先检查 MarkWord 里面放的是不是自己的 ThreadID ,如果是,说明当前线程处于 “偏向锁”</font></li><li><font face="华文中宋" size="3">如果不是,锁升级,这时使用 CAS 操作来执行切换,新的线程根据 MarkWord 里面现有的 ThreadID 来通知之前的线程暂停,将 MarkWord 的内容置为空<br>然后,两个线程都将锁对象 HashCode 复制到自己新建的用于存储锁的记录空间中,接着开始通过 CAS 操作,把锁对象的 MarkWord 的内容修改为自己新建的记录空间地址,以这种方式竞争 MarkWord ,成功执行 CAS 的线程获得资源,失败的则进入自旋<ul><li><font face="华文中宋" size="3">自旋的线程在自旋过程中,如果成功获得资源(也就是之前获得资源的线程执行完毕,释放了共享资源),那么整个状态依然是 <code>轻量级锁</code> 的状态</font></li><li><font face="华文中宋" size="3">如果没有获得资源,就进入  <code>重量级锁</code> 的状态,此时,自旋的线程进行阻塞,等待之前线程执行完成并且唤醒自己</font></li></ul></font></li></ul><p><font face="华文中宋" size="3">参考:</font></p><ul><li><font face="华文中宋" size="3">Java 并发编程的技术</font></li><li><font face="华文中宋" size="3">极客时间—深入拆解 Java 虚拟机</font></li></ul><p><font face="华文中宋" size="3">到这里,整篇文章的内容就算是结束了.<br>没想到这篇文章竟然被我写了有 5000 多字(我已经有些虚脱了<br>能够阅读到这里的各位,希望能够给你带来一些帮助<br>以上,感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;synchronized-关键字&quot;&gt;&lt;a href=&quot;#synchronized-关键字&quot; class=&quot;headerlink&quot; title=&quot;synchronized 关键字&quot;&gt;&lt;/a&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;synchronized 关键字&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;说到锁,都会提 synchronized .这个英文单词儿啥意思呢?翻译成中文就是「同步」的意思&lt;br&gt;一般都是使用 synchronized 这个关键字来给一段代码或者一个方法上锁,使得这段代码或者方法,在同一个时刻只能有一个线程来执行它.&lt;br&gt;
    
    </summary>
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[Java 并发]你确定你了解 volatile ?</title>
    <link href="https://www.dynamic-zheng.com/posts/6bdf9b1b.html"/>
    <id>https://www.dynamic-zheng.com/posts/6bdf9b1b.html</id>
    <published>2020-05-01T10:10:33.000Z</published>
    <updated>2020-05-01T10:13:46.986Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">学 Java 并发,过不去 volatile 和 synchronized ,既然过不去,那就不过了,踏踏实实把它搞懂,踩在脚下.<br><a id="more"></a><br>这篇文章先搞定 volatile ,后面我再写另外一篇文章关于 synchronized 和锁的.<br>以下,正文开始:</font></p><p><font face="华文中宋" size="3">在 Java 中, volatile 主要有两个功能:</font></p><ul><li><font face="华文中宋" size="3">保证变量的内存可见性</font></li><li><font face="华文中宋" size="3">禁止 volatile 变量与普通变量重排序</font></li></ul><p><font face="华文中宋" size="3">接下来一一来看这两个功能,以及是怎么实现的</font></p><h1 id="什么是内存可见性"><a href="#什么是内存可见性" class="headerlink" title="什么是内存可见性"></a><font face="华文中宋" size="3">什么是内存可见性</font></h1><p><font face="华文中宋" size="3">如果要谈 volatile 保证了变量的内存可见性,那就需要了解什么是内存可见性</font></p><blockquote><p><font face="华文中宋" size="3">所谓内存可见性是说,当一个线程对 <code>volatile</code> 修饰的变量进行<strong>写操作</strong>时, JMM 会立即将该线程对应的本地内存中的共享变量的值刷新到主内存中;当一个线程对 <code>volatile</code> 修饰的变量进行<strong>读操作</strong>时, JMM 会立即将该线程对应的本地内存设置为无效,然后从主内存中读取共享变量的值</font></p></blockquote><p><font face="华文中宋" size="3">在 JSR-133 之前的旧的 Java 内存模型中,是允许 volatile 变量与普通变量重排序的.<br>也就是说,虽然 volatile 变量能够保证内存可见性,但是可能程序执行的结果依旧不是你想要的.<br>如果直接使用锁的话,又会让整个程序变得比较重量级,基于以上考虑, JSR-133 专家组决定增强 volatile 的内存语义:<strong>严格限制编译器和处理器对 volatile 变量与普通变量的排序</strong></font></p><h1 id="如何禁止-volatile-变量与普通变量重排序"><a href="#如何禁止-volatile-变量与普通变量重排序" class="headerlink" title="如何禁止 volatile 变量与普通变量重排序"></a><font face="华文中宋" size="3">如何禁止 volatile 变量与普通变量重排序</font></h1><p><font face="华文中宋" size="3">俗话说,说得容易,做起来就比较难.定义了严格限制 volatile 变量与普通变量的排序,那是拿什么来做保证的呢? JVM 在处理器层面是通过<strong>内存屏障</strong>来实现的.</font></p><ul><li><font face="华文中宋" size="3">什么是内存屏障呢?从硬件层面来说,内存屏障分为两种:读屏障( Load Barrier )和写屏障( Store Barrier ).内存屏障有两个作用:<ul><li><font face="华文中宋" size="3">阻止屏障两侧的指令重排序</font></li><li><font face="华文中宋" size="3">强制把写缓冲区/高速缓存中的脏数据等写回主内存,或者让缓存中相应的数据失效.<br>这里的缓存主要是指: CPU 缓存,如 L1 , L2 等</font></li></ul></font></li></ul><p><font face="华文中宋" size="3">编译器在生成字节码时,会在指令序列中插入内存屏障来禁止特定类型的处理器重排序.<br>在这里编译器选择了一个比较保守的 JMM 内存屏障插入策略,保守的好处就是,可以保证在任何处理器平台,任何程序中都能得到正确的 volatile 内存语义.这个保守策略就是( Load 代表读操作, Store 代表写操作):</font></p><ul><li><font face="华文中宋" size="3">在每个 volatile 写操作前,插入一个 StoreStore 屏障;<ul><li><font face="华文中宋" size="3">比如: <code>Store1 ; StoreStore ; Store2</code> 语句,在 Store2 及后续写入操作执行前,要保证 Store1 的写入操作对其他处理器可见</font></li></ul></font></li><li><font face="华文中宋" size="3">在每个 volatile 写操作后,插入一个 StoreLoad 屏障;<ul><li><font face="华文中宋" size="3">比如: <code>Store1 ; StoreLoad ; Load2</code> 语句,在 Load2 及后续所有读取操作之前,要保证 Store1 的写入对所有处理器可见</font></li></ul></font></li><li><font face="华文中宋" size="3">在每个 volatile 读操作后,插入一个 LoadLoad 屏障;<ul><li><font face="华文中宋" size="3">比如: <code>Load1 ; LoadLoad ; Load2</code> ,在 Load2 及后续读取操作要读取的数据被访问前,要保证 Load1 要读取的数据读取完毕</font></li></ul></font></li><li><font face="华文中宋" size="3">在每个 volatile 读操作后,再插入一个 LoadStore 屏障<ul><li><font face="华文中宋" size="3">比如: <code>Load1 ; LoadStore ; Store2</code> 在 Store2 及后续写入操作被刷出前,要保证 Load1 读取的数据读取完毕</font></li></ul></font></li></ul><p><font face="华文中宋" size="3">是不是有点儿懵?别急,我这里画了两张图,可以看着理解一下</font></p><p><img src="/images/2020/volatile写.jpg"><br><img src="/images/2020/volatile读.jpg"></p><p><font face="华文中宋" size="3">写到这里了,就顺便介绍一下 volatile 和普通变量的重排序规则:</font></p><ul><li><font face="华文中宋" size="3">如果第一个操作是 volatile 读,那么不管第二个操作是什么,都不能重排序;</font></li><li><font face="华文中宋" size="3">如果第二个操作是 volatile 写,那么不管第一个操作是什么,都不能重排序;</font></li><li><font face="华文中宋" size="3">如果第一个操作是 volatile 写,第二个操作是 volatile 读,也不能重排序;</font></li></ul><p><font face="华文中宋" size="3">可以发现,针对 volatile 写操作来说,是比较严格的,但是如果第一个是普通变量的读,第二个是 volatile 的读,我可不可以重排序呢?可以</font></p><h1 id="volatile-怎么用"><a href="#volatile-怎么用" class="headerlink" title="volatile 怎么用"></a><font face="华文中宋" size="3">volatile 怎么用</font></h1><p><font face="华文中宋" size="3">看到这里,应该就能知道, volatile 保证了内存可见性以及禁止重排序.<br>在保证内存可见性这一点上,可以说 volatile 和锁有着相同的意义,所以 volatile 可以作为一个”轻量级”锁来使用.<br>volatile 的本质其实就是告诉 JVM ,我修饰的这个变量在寄存器中的值是不确定的,如果需要的话,不能直接从本地内存中读取,需要从主存中去拿,所以 volatile 它改变的只是变量的可见性,但是不保证原子性.<br>基于此,就需要搞清楚,在什么情况下使用 volatile 比较好.</font></p><p><font face="华文中宋" size="3">对于 volatile 关键字来说,当且仅当满足以下所有条件时,才可以使用:</font></p><ul><li><font face="华文中宋" size="3">对变量的写操作不依赖变量的当前值,或者确保只有单个线程更新变量的值</font></li><li><font face="华文中宋" size="3">变量没有包含在具有其他变量的不变式中</font></li></ul><p><font face="华文中宋" size="3">我觉得上面的条件,就是为了保证操作是原子性操作,因为 volatile 不保证原子性,那为了安全,就要保证你本身的操作就是原子性操作,相当于直接从源头上就把不是原子性操作给排除掉.<br>这样的话,就比较容易搞清楚 volatile 这个变量使用在什么场景下了:</font></p><ul><li><font face="华文中宋" size="3">用来标识状态,比如 <code>boolean flag</code> 这种</font></li><li><font face="华文中宋" size="3">一次性安全发布( one-time safe publication ):实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型</font></li><li><font face="华文中宋" size="3">独立观察( independent observation):安全使用 volatile 的另一种简单模式是:定期”发布” 观察结果供程序内部使用.例如,假设有一种环境传感器能够感觉环境温度,一个后台线程可能会每隔几秒读取一次该传感器,并更新包含当前文档的 volatile 变量.然后,其他线程可以读取这个变量,从而随时能够看到最新的温度值</font></li></ul><p><font face="华文中宋" size="3">参考:<br>深入理解 JVM<br><a href="https://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="noopener">Java 理论与实践:正确使用 Volatile 变量</a><br><a href="https://www.jianshu.com/p/ef8de88b1343" target="_blank" rel="noopener">并发关键字 volatile（重排序和内存屏障）</a><br><a href="https://blog.csdn.net/hqq2023623/article/details/51013468" target="_blank" rel="noopener">JMM——volatile与内存屏障</a></font></p><p><font face="华文中宋" size="3">以上,感谢您的阅读哇</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;学 Java 并发,过不去 volatile 和 synchronized ,既然过不去,那就不过了,踏踏实实把它搞懂,踩在脚下.&lt;br&gt;
    
    </summary>
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[Java 并发]为什么会有重排序?和 happens-before 有啥关系</title>
    <link href="https://www.dynamic-zheng.com/posts/e3a1cde0.html"/>
    <id>https://www.dynamic-zheng.com/posts/e3a1cde0.html</id>
    <published>2020-05-01T00:50:20.000Z</published>
    <updated>2020-05-01T00:53:47.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a><font face="华文中宋" size="3">举个例子</font></h1><a id="more"></a><p><font face="华文中宋" size="3">在讲重排序之前,先来看一个例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> one = a;</span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> two = b;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">应该不难看出,在上面的例子中,我定义了两个共享变量 a 和 b ,以及两个方法.其中第一个方法是将局部变量 one 赋值为 a ,然后将 b 的值置为 1 .第二个方法则是将局部变量 two 赋值为 b ,然后将 a 的值置为 2 .<br>那么我在这里有个问题,  <code>( one , two )</code> 的值会是什么?</font></p><p><font face="华文中宋" size="3">你可能会不假思索的告诉我,不是 <code>( 0 , 1 )</code> 就是 <code>( 2 , 0 )</code> ,这需要看我的 main 方法先执行哪个 method 方法.<br>不错,如果这个程序跑在了单线程上面,这样回答一点儿毛病都没有.<br>但是,如果是在多线程环境下呢?</font></p><p><font face="华文中宋" size="3">假设,现在 <code>methodOne</code> 和 <code>methodTwo</code> 分别在两个不同的线程上执行,此时 Java 虚拟机在执行了任意一个方法的第一条赋值语句之后就切换线程,这个时候的 <code>( one , two )</code> 的值可能是 <code>( 0 , 0 )</code><br>看到这儿,有没有疑惑?为啥呢,怎么我写的程序好好的,到 Java 虚拟机这里了,它就变了呢?<br>就是因为在执行的过程中,发生了重排序.它可能是即时编译器的重排序,可能是处理器的乱序执行,或者是内存系统的重排序.<br>总之,在程序执行过程中,发生了重排序,然后得到的结果可能是 <code>( 0 , 0 )</code> 这种情况.</font></p><h1 id="为什么会重排序"><a href="#为什么会重排序" class="headerlink" title="为什么会重排序"></a><font face="华文中宋" size="3">为什么会重排序</font></h1><p><font face="华文中宋" size="3">看完上面,你可能会有疑问,为什么会有重排序呢?<br>我的程序按照我自己的逻辑写下来好好的没啥问题, Java 虚拟机为什么动我的程序逻辑?<br>你想想, CPU ,内存这些都是非常宝贵的资源, Java 虚拟机如果在重排序之后没啥效果,肯定也不会做这种费力不讨好的事情.<br>那么,重排序带来了什么好处呢?</font></p><h2 id="重排序使得程序的性能得以提高"><a href="#重排序使得程序的性能得以提高" class="headerlink" title="重排序使得程序的性能得以提高"></a><font face="华文中宋" size="3">重排序使得程序的性能得以提高</font></h2><p><font face="华文中宋" size="3">为了方便理解,我拿生活中的场景来举例子.<br>大早上起来,你会穿衣服,洗漱,做饭,吃饭对吧.那么在你起床之后,你是怎么做的呢?你是不是会在洗漱的时候,先把饭做上(比如让蒸蛋机帮你蒸个鸡蛋),然后呢等你洗漱完毕之后,就可以直接吃早饭了.<br>你为什么要这样做呢?还不是为了省时间,可以多睡那么一分钟,对不对.</font></p><p><font face="华文中宋" size="3">同样的道理, Java 虚拟机之所以要进行重排序就是为了提高程序的性能.你写的程序,简简单单一行代码,到底层可能需要使用不同的硬件,比如一个指令需要同时使用 CPU 和打印机设备,但是此时 CPU 的任务完成了,打印机的任务还没完成,这个时候怎么办呢?不让 CPU 执行接下来的指令吗? CPU 的时间那么宝贵,你不让它工作,确定不是在浪费它的生命?<br>所以为了提高利用率以及程序的性能, Java 虚拟机会在你这个指令还没完全执行完毕的时候,就去执行另外一个指令.这就是流水线技术<br>流水线最怕的是啥?是我执行着命令,执行着命令,突然中断了,恢复中断的成本是很大的,所以就要想尽办法,绞尽脑汁不要让中断的情况发生.</font></p><p><font face="华文中宋" size="3">即时编译器的重排序,处理器的乱序执行,以及内存系统的重排序的存在,都是为了减少中断.<br>到这里,你是不是对于 Java 虚拟机进行重排序这一点有了了解?</font></p><h1 id="重排序带来的问题"><a href="#重排序带来的问题" class="headerlink" title="重排序带来的问题"></a><font face="华文中宋" size="3">重排序带来的问题</font></h1><p><font face="华文中宋" size="3">回到文章刚开始举的那个例子,重排序提高了 CPU 的利用率没错,提高了程序性能没错,但是我的程序得到的结果可能是错误的啊,这是不是就有点儿得不偿失了?<br>因为<strong>重排序可以保证串行语义一致,但是没有义务保证多线程间的语义也一致</strong></font></p><p><font face="华文中宋" size="3">凡是问题,都有办法解决,要是没有,那就再想想.<br>它是怎么解决的呢?这就需要来说说,顺序一致性内存模型和 JMM ( Java Memory Model , Java 内存模型)</font></p><h1 id="顺序一致性内存模型与-JMM"><a href="#顺序一致性内存模型与-JMM" class="headerlink" title="顺序一致性内存模型与 JMM"></a><font face="华文中宋" size="3">顺序一致性内存模型与 JMM</font></h1><p><font face="华文中宋" size="3">要说数据一致性的话,就要说一说,数据竞争.<br>啥是数据竞争呢?在 Java 内存模型规范中给出了定义:</font></p><ul><li><font face="华文中宋" size="3">在一个线程中写一个变量</font></li><li><font face="华文中宋" size="3">在另外一个线程中读同一个变量</font></li><li><font face="华文中宋" size="3">写和读没有通过同步来排序</font></li></ul><p><font face="华文中宋" size="3">当代码中包含数据竞争时,程序的执行结果往往会超出你的想象,比如咱们刚开始说的那个例子,得到的结果可能是 <code>( 0 , 0 )</code> .但是如果一个多线程程序能够正确同步的话,那上面的结果就不会出现了.<br>Java 内存模型对于正确同步多线程程序的内存一致性做了下面的保证:</font></p><blockquote><p><font face="华文中宋" size="3"><strong>如果程序是正确同步的,程序的执行也会具有顺序一致性</strong>即,程序的执行结果与该程序在顺序一致性模型中执行的结果相同</font></p></blockquote><p><font face="华文中宋" size="3">这里面的同步包括了使用 <code>volatile</code> , <code>final</code> , <code>synchronized</code> 等关键字来实现多线程下的同步.那也就是说,如果没有正确使用这些同步, JMM 就不会有内存可见性的保证,这就会导致写的程序出错.</font></p><p><font face="华文中宋" size="3">顺序一致性内存模型是一个<strong>理想状态下的理论参考模型</strong>,它为程序员提供了特别强的内存可见性保证,顺序一致性模型有两大特性:</font></p><ul><li><font face="华文中宋" size="3">一个线程中的所有操作必须按照程序的顺序来执行(也就是按照写的代码的顺序来执行)</font></li><li><font face="华文中宋" size="3">不管程序是否同步,所有线程都只能看到一个单一的操作执行顺序.也就是说,在顺序一致性模型中,每个操作必须是原子性的,而且立刻对所有线程都是可见的.</font></li></ul><p><font face="华文中宋" size="3">上面说了,顺序一致性内存模型是一个理想状态下的理论参考模型,因为顺序一致性内存模型要求操作对所有线程都是可见,只是这一点就会让 Java 虚拟机的性能降低. JMM 就是在顺序一致性内存模型的基础上,做了一些优化:</font></p><ul><li><font face="华文中宋" size="3">针对同步的多线程程序来说,也就是临界区内的代码, JMM 允许发生重排序(但是不允许临界区内的代码”逃逸”到临界区之外,因为如果允许的话,就会破坏锁的内存语义)</font></li><li><font face="华文中宋" size="3">针对未同步的多线程程序来说, JMM 只提供最小安全性:线程读取到的值,要么是之前某个线程写入的值,要么是默认值,不会无中生有.</font></li></ul><p><font face="华文中宋" size="3">应该能够感觉到,相比于顺序一致性内存模型来说, JMM 给了编译器和处理器一些空间,允许它们发生重排序.<br>这时候就有冲突点了:程序员这边需要 JMM 提供一个强的内存模型来编写代码,也就是我代码写的顺序是什么样,那程序执行的时候就要是什么样;但是编译器和处理器则需要 JMM 对它们的约束越少越好,这样它们就可以尽可能多的去做优化,来提高性能<br>作为 JMM 这个中介者来说,既要满足程序员的需求,又要满足编译器和处理器的需求,那就需要在这两者之间找一个平衡点,让程序员写的代码能够产生他期望的结果,同时呢,也让编译器和处理器能够做一些优化<br>JMM 提出的解决方案就是:对于程序员,提供 happens-before 规则,这样就满足了程序员的需求 —&gt; 简单易懂,而且提供了足够强的内存可见性保证;对于编译器和处理器来说,只要不改变程序的执行结果(前提是正确同步了多线程程序),想怎么优化就怎么优化.</font></p><h1 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a><font face="华文中宋" size="3">happens-before</font></h1><p><font face="华文中宋" size="3">终于讲到了 happens-before .<br>先来看 happens-before 关系的定义:</font></p><ul><li><font face="华文中宋" size="3">如果一个操作 happens-before 另一个操作,那么第一个操作的执行结果就会对第二个操作可见</font></li><li><font face="华文中宋" size="3">两个操作之间如果存在 happens-before 关系,并不意味着 Java 平台的具体实现就必须按照 happens-before 关系指定的顺序来执行.如果重排序之后的执行结果,与按照 happens-before 关系来执行的结果一直,那么 JMM 也允许这样的重排序</font></li></ul><p><font face="华文中宋" size="3">看到这儿,你是不是觉得,这个怎么和 as-if-serial 语义一样呢.没错, happens-before 关系本质上和 as-if-serial 语义是一回事.<br>as-if-serial 语义保证的是单线程内重排序之后的执行结果和程序代码本身应该出现的结果是一致的, happens-before 关系保证的是正确同步的多线程程序的执行结果不会被重排序改变.<br>一句话来总结就是:如果操作 A happens-before 操作 B ,那么操作 A 在内存上所做的操作对操作 B 都是可见的,不管它们在不在一个线程.</font></p><p><font face="华文中宋" size="3">在 Java 中,对于 happens-before 关系,有以下规定:</font></p><ul><li><font face="华文中宋" size="3">程序顺序规则:一个线程中的每一个操作, happens-before 于该线程中的任意后续操作</font></li><li><font face="华文中宋" size="3">监视器锁规则:对一个锁的解锁, happens-before 于随后对这个锁的加锁</font></li><li><font face="华文中宋" size="3">volatile 变量规则:对一个 volatile 域的写, happens-before 与任意后续对这个 volatile 域的读</font></li><li><font face="华文中宋" size="3">传递性:如果 A happens-before B , 且 B happens-before C ,那么 A happens-before C</font></li><li><font face="华文中宋" size="3">start 规则:如果线程 A 执行操作 ThreadB.start() 启动线程 B ,那么 A 线程的 ThreadB.start() 操作 happens-before 于线程 B 中的任意操作</font></li><li><font face="华文中宋" size="3">join 规则:如果线程 A 执行操作 ThreadB.join() 并成功返回,那么线程 B 中的任意操作 happens-before 于线程 A 从 ThreadB.join() 操作成功返回.</font></li></ul><p><font face="华文中宋" size="3">写到这里,我感觉终于是写完这篇文章了,从为什么要重排序讲到 happens-before .</font></p><ul><li><font face="华文中宋" size="3">参考:<br>Java 并发编程的艺术</font></li></ul><p><font face="华文中宋" size="3">最后,真是太感谢您的阅读了哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;举个例子&quot;&gt;&lt;a href=&quot;#举个例子&quot; class=&quot;headerlink&quot; title=&quot;举个例子&quot;&gt;&lt;/a&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;举个例子&lt;/font&gt;&lt;/h1&gt;
    
    </summary>
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[Java 并发]带你从源码解读线程组( ThreadGroup )好不好</title>
    <link href="https://www.dynamic-zheng.com/posts/63ed9e38.html"/>
    <id>https://www.dynamic-zheng.com/posts/63ed9e38.html</id>
    <published>2020-04-25T05:45:04.000Z</published>
    <updated>2020-05-01T00:47:57.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadGroup-概念"><a href="#ThreadGroup-概念" class="headerlink" title="ThreadGroup 概念"></a><font face="华文中宋" size="3">ThreadGroup 概念</font></h1><a id="more"></a><p><font face="华文中宋" size="3">只是从英文名字上,也能看到这个概念的简单粗暴, ThreadGroup 就是线程组.<br>也就是说,每个 Thread 都能在一个 ThreadGroup 中找到.那么你可能会问了,我不存在于一个 ThreadGroup 不行?自己在程序里面一个人潇洒走天下,岂不是超级爽?<br>抱歉,此路不通.为啥呢?咱们来看源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line">        Thread parent = currentThread();</span><br><span class="line">        SecurityManager security = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Determine if it's an applet or not */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If there is a security manager, ask the security manager</span></span><br><span class="line"><span class="comment">               what to do. */</span></span><br><span class="line">            <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">                g = security.getThreadGroup();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If the security doesn't have a strong opinion of the matter</span></span><br><span class="line"><span class="comment">               use the parent thread group. */</span></span><br><span class="line">            <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">                g = parent.getThreadGroup();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">我们能够看到,如果 g 为空,会做这样的处理</font></p><ul><li><font face="华文中宋" size="3">首先看 security 是否为空,如果不为空,直接使用 security 的线程组</font></li><li><font face="华文中宋" size="3">如果 security 是空的话,那么这个线程就获取当前线程所属的线程组<br>所以你想脱离组织自己玩?这种事情想都不要想.<br>操作系统怎么可能允许有逃离自己掌控之外的存在呢!</font></li></ul><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a><font face="华文中宋" size="3">优先级</font></h1><p><font face="华文中宋" size="3">OK ,咱们接下来谈另外一个问题.<br>一个 Thread 必然存在于一个 ThreadGroup , Thread 有自己的优先级, ThreadGroup 也有优先级,如果 Thread 的优先级大于 ThreadGroup 的优先级了,这个时候咋整呢?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span> </span>&#123;</span><br><span class="line">        ThreadGroup g;</span><br><span class="line">        checkAccess();</span><br><span class="line">        <span class="comment">// 如果设置的 priority 大于系统设置的最大值,或者小于系统设置的最小值</span></span><br><span class="line">        <span class="comment">// 抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果设置线程的优先级大于线程组的优先级,则重置线程的优先级为线程组的优先级</span></span><br><span class="line">            <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">                newPriority = g.getMaxPriority();</span><br><span class="line">            &#125;</span><br><span class="line">            setPriority0(priority = newPriority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">所以啊,优先级冲突了,两位也别吵吵, Thread 踏踏实实跟着 ThreadGroup 走才有肉吃不是~</font></p><h1 id="ThreadGroup-还可以做"><a href="#ThreadGroup-还可以做" class="headerlink" title="ThreadGroup 还可以做"></a><font face="华文中宋" size="3">ThreadGroup 还可以做</font></h1><p><font face="华文中宋" size="3">看完上面,你可能觉得,哦,原来线程组就是管线程的啊<br>你如果真的这么认为的话,我赶紧写写接下来的内容,把你的思绪拉一拉<br>线程组管理的可不单单是线程.<br>咱们看看源码里面,线程组的成员变量都有啥:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroup</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup parent;  <span class="comment">// 父 ThreadGroup</span></span><br><span class="line">    String name;  <span class="comment">// ThreadGroup 名称</span></span><br><span class="line">    <span class="keyword">int</span> maxPriority;  <span class="comment">// 线程最大优先级</span></span><br><span class="line">    <span class="keyword">boolean</span> destroyed;  <span class="comment">// 是否被销毁</span></span><br><span class="line">    <span class="keyword">boolean</span> daemon;  <span class="comment">// 是否守护线程</span></span><br><span class="line">    <span class="keyword">boolean</span> vmAllowSuspension;  <span class="comment">// 是否可以中断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nUnstartedThreads = <span class="number">0</span>;  <span class="comment">// 还未启动的线程</span></span><br><span class="line">    <span class="keyword">int</span> nthreads;  <span class="comment">// ThreadGroup 中线程数目</span></span><br><span class="line">    Thread threads[];  <span class="comment">// ThreadGroup 中的线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ngroups;  <span class="comment">// 线程组数目</span></span><br><span class="line">    ThreadGroup groups[];  <span class="comment">// 线程组数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">吼,原来线程组里面还可以有线程组,不单单是有线程,原来还可以控制线程优先级,还可以决定是否销毁线程或者守护线程,或者中断线程.</font></p><p><font face="华文中宋" size="3">到这里,咱们来总结一下:</font></p><ul><li><font face="华文中宋" size="3">线程组是一个父子结构,一个线程组可以属于其他线程组,也可以拥有自己的子线程组,如果你一直向上追溯的话,会发现所有的线程组都在一个根线程组里面— System 线程组</font></li><li><font face="华文中宋" size="3">线程组的出现可不是为耍酷用的,它是为了更方便的管理线程而存在的.比如设置线程最大优先级,销毁线程等等</font></li></ul><p><font face="华文中宋" size="3">以上,就是想要分享的内容了<br>感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ThreadGroup-概念&quot;&gt;&lt;a href=&quot;#ThreadGroup-概念&quot; class=&quot;headerlink&quot; title=&quot;ThreadGroup 概念&quot;&gt;&lt;/a&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;ThreadGroup 概念&lt;/font&gt;&lt;/h1&gt;
    
    </summary>
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="https://www.dynamic-zheng.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]16 你是不是和我一样,不知道图这种数据结构怎么用?</title>
    <link href="https://www.dynamic-zheng.com/posts/1eb1a8ac.html"/>
    <id>https://www.dynamic-zheng.com/posts/1eb1a8ac.html</id>
    <published>2020-04-18T01:05:35.000Z</published>
    <updated>2020-04-18T01:32:25.910Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">你是不是和我一样,在学习数据结构与算法时,了解了一下图这种数据结构之后,根本不知道它的用武之地在哪里?<br>在我查了资料之后,现在我可以跟你讲讲,图可以这么用!<br><a id="more"></a></font></p><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a><font face="华文中宋" size="3">概念介绍</font></h1><p><font face="华文中宋" size="3">先来了解一下什么是图.<br>图,是一种非线性表数据结构.<br>那么你可能会问了,什么是线性表结构哇,我怎么区别一种数据结构是线性的,还是非线性的呢.<br>哈哈,还好我机智,在这篇文章之前就写了一篇文章来介绍,如果还有疑问,楼上雅座请: <a href="https://www.dynamic-zheng.com/posts/d42777bf.html">[数据结构与算法]14 搞不懂线性结构,非线性结构?</a></font></p><p><font face="华文中宋" size="3">在图中元素叫做顶点( vertex ),图中的一个顶点可以和其他任意顶点建立连接关系,这种建立的关系叫做边( edge )</font></p><h1 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a><font face="华文中宋" size="3">无向图</font></h1><p><img src="/images/2020/undirected-graph.jpg"></p><p><font face="华文中宋" size="3">上面给出的是无向图.看到这里你可能就觉得比较疑惑,这个无向图看起来没啥呀,怎么会有这种数据结构呢?<br>不知道你是怎么想的,我刚开始学的时候就有这种疑问,这是什么神仙数据结构哇,还会有应用场景?<br><img src="/images/2020/真香警告.jpg"></font></p><p><font face="华文中宋" size="3">既然有疑惑,那就给个应用场景:<br>假设,现在你和我是微信好友,那是不是应该你的好友列表里面有我,我的好友里面有你,这样咱们才是好友对不对~<br>那在数据库中如何表示呢?吼~这个时候无向图就登场了<br>你和我是微信好友,那就在咱俩之间来条线,表示咱俩之间有关系,一条线就解决了问题,真是完美至极啊<br>假设,(怎么又是假设,哈哈哈)上图中表示的就是 A,B,C,D,E,F 之间的关系,那你可能就发现问题了,有的顶点线比较多,比如 D 有四条线,有的就相对少一些,比如 B 有两条线.这些线就表示顶点的度( degree ).这个概念有啥用?<br>能一眼看出来谁的好友多!那这个功能有啥用?(好吧,这个功能好像是有点儿鸡肋,不过也算是一个应用场景</font></p><h1 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a><font face="华文中宋" size="3">有向图</font></h1><p><font face="华文中宋" size="3">看到上面的无向图,基础不错的小伙伴肯定会说了,我还知道有向图呢!<br>呦呵,不错,有向图就是下面这个样子:<br><img src="/images/2020/directed-graph.jpg"></font></p><p><font face="华文中宋" size="3">在无向图中,咱们知道一个顶点有多少条边,就说它的度为多少.<br>在有向图中呢,有指向顶点的,也有从顶点指出去的,基于无向图的概念,咱们把从这个顶点指出去的边称为出度,指向该顶点的边称为入度.<br>那么有向图会应用在哪些场景呢?微信好友这个场景是不太可以了<br>那么微博呢?<br>微博和微信有什么不一样呢?微信是你和我是好友,那么咱们的好友列表里一定是要有彼此的,拉黑或者删除彼此了,那就不能互相发送消息了.<br>但是微博呢?你关注了我,并不代表我就要关注你对吧?看到这里有没有一种豁然开朗的感觉~<br>那么我关注了多少人就是出度,多少人关注了我就是入度.<br>这样带入理解是不是会比较好一点儿?(我可真是个天才,哈哈哈</font></p><h1 id="带权图"><a href="#带权图" class="headerlink" title="带权图"></a><font face="华文中宋" size="3">带权图</font></h1><p><font face="华文中宋" size="3">看完了无向图,有向图,相信就有人说,我还见过带权图!(陈独秀给我坐下!<br>带权图长啥样呢?就下面这个样子:<br><img src="/images/2020/weighted-graph.jpg"></font></p><p><font face="华文中宋" size="3">懵逼了,这每条边上的数字是个什么鬼呦<br>别急,咱们来个场景:大家都玩 QQ 嘛?(别跟我说不玩,配合一下嘛…<br>玩 QQ 的话,一定知道有 QQ 空间,然后空间里面有个「谁在意我」「我在意谁」的功能,就是下图:<br><img src="/images/2020/QQ.jpg"></font></p><p><font face="华文中宋" size="3">那么有没有好奇过呢? QQ 怎么知道我在意谁,谁在意我呢?<br>就是通过带权图哇<br>你访问了一个人的空间,这条边的权重就增加一点儿;别人访问了你的空间,那这条边的权重就增加一点儿;这段时间你们两个人聊天聊得比较频繁,来个小火花,顺便在你们两者之间的边权重增加一点儿.然后根据这些边的权重从大到小排序就得出了「谁在意我」「我在意谁」</font></p><p><font face="华文中宋" size="3">到这里,上面的一切理解都还 OK ?<br>那咱们继续.图是怎么表示的呢?<br>图这种数据结构,再怎么画顶点,画边,到最后在物理结构上是怎么存储的呢?<br>别急,你所疑惑的,我都帮你想到了</font></p><h1 id="图的存储方法"><a href="#图的存储方法" class="headerlink" title="图的存储方法"></a><font face="华文中宋" size="3">图的存储方法</font></h1><p><font face="华文中宋" size="3">图的存储方法主要有以下两种:</font></p><ul><li><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a><font face="华文中宋" size="3">邻接矩阵</font></h2><font face="华文中宋" size="3">邻接矩阵的底层依赖一个二维数组.对于无向图来说,如果 i 与 j 之间有边,那就将 A[i][j] 和 A[j][i] 标记为 1 ;对于无向图来说,如果 i 指向 j ,那么 A[i][j] 值为 1 ,如果 j 指向 i ,那么 A[j][i] 值为 1 ;对于带权图来说, A[i][j] 存储的值就不是 1 了,而是对应的权重值.所以这是图最直观的一种存储方法.<br>啥,你跟我说这还不直观?该不会是没有看下图吧:<br><img src="/images/2020/adjacency-matrix.jpg"><br><font face="华文中宋" size="3">但是你发现问题了嘛,这样看起来确实是直观了很多,但是很浪费空间有没有!比如无向图,如果 A[i][j] 为 1 ,那么 A[j][i] 肯定也是 1 ,多存储 A[j][i] 根本没啥必要.就像买东西,明明一块钱能买到的东西,为啥非要花两块钱?<br>所以如果使用邻接矩阵来表示的话,一定要清楚它的缺点.</font></font></li></ul><p><font face="华文中宋" size="3">但这并不是说,使用邻接矩阵来存储就没啥优点.这天底下哪儿有那么绝对的事情呢.<br>首先,邻接矩阵的存储方式简单,直接,所以当我们需要获取两个顶点之间的关系时,相信我没有比这种存储结构更高效的了.<br>还有就是使用邻接矩阵存储图的另外一个优点就是方便计算,因为可以将很多图的运算转换成矩阵之间的运算.</font></p><ul><li><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a><font face="华文中宋" size="3">邻接表</font></h2><font face="华文中宋" size="3">先来看图:<br><img src="/images/2020/adjacency-list.jpg"><br><font face="华文中宋" size="3">乍一看,这不是散列表嘛!每个顶点对应一条链表,链表中存储的是与这个顶点相连接的其他顶点.<br>嘿嘿,直觉超棒!</font></font></li></ul><p><font face="华文中宋" size="3">如果你对散列表熟悉的话,应该知道,在散列表中,如果链太长了,会导致冲突概率增大,复杂度也蹭的一下升高.而且吧,链表的存储方式你也知道,不是连续的,所以相对于数组来说, CPU 读取就会慢一些,相对于邻接矩阵的存储方式,在邻接表中查询两个顶点之间的关系就没那么高效了.<br>所以在实际开发中要注意遇到这种情况该如何处理,或者在刚开始的时候就直接设计好实现方式.比如可以将邻接表中的链表改为平衡二叉树,或者红黑树.</font></p><p><font face="华文中宋" size="3">我觉得对于数据结构来说,没有最好的,只有最合适的~</font></p><p><font face="华文中宋" size="3">参考</font></p><ul><li><font face="华文中宋" size="3">极客时间—&lt;数据结构与算法之美&gt;</font></li></ul><p><font face="华文中宋" size="3">以上,就是想要分享的内容了<br>感谢您的阅读哇</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;你是不是和我一样,在学习数据结构与算法时,了解了一下图这种数据结构之后,根本不知道它的用武之地在哪里?&lt;br&gt;在我查了资料之后,现在我可以跟你讲讲,图可以这么用!&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]15 两行代码就可以搞定求众数,但还有更巧的</title>
    <link href="https://www.dynamic-zheng.com/posts/de95c539.html"/>
    <id>https://www.dynamic-zheng.com/posts/de95c539.html</id>
    <published>2020-04-11T23:38:17.000Z</published>
    <updated>2020-04-11T23:40:40.369Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">这个周末刷了几道算法题,把其中一个比较不错的分享给你~<br><a id="more"></a></font></p><blockquote><p> 给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。<br> 你可以假设数组是非空的，并且给定的数组总是存在多数元素。<br> 示例 1:<br> 输入: [3,2,3]<br> 输出: 3<br> 示例 2:<br> 输入: [2,2,1,1,1,2,2]<br> 输出: 2</p></blockquote><p><font face="华文中宋" size="3">哦,原来是求众数,注意一下哈,这里的众数是指”在数组中出现次数大于 ⌊ n/2 ⌋ 的元素”,不要问我为什么要你们注意一下这个条件,因为我钻牛角尖了!</font></p><p><font face="华文中宋" size="3">拿到这个题目,我的第一反应就是,那我给这个数组排个序然后取中间的值不就得了?<br>所以代码就只有两行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(nums);</span><br><span class="line">return nums[nums.length &gt;&gt; 1];</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">写完程序运行,一点儿毛病都没有,简简单单两行代码就搞定,那一刻我觉得我就是个天才!<br>后来梦醒了,冷静分析了一下,我去这样的代码简单是简单,但是时间复杂度是 O(nlogn) ,空间复杂度是 O(logn)<br>所以有没有更好的解决方案呢?能让它的时间复杂度和空间复杂度都降下来<br>必须得有哇!要不然我写这篇文章是为了啥<br>这种比较好的解决方案就是摩尔投票法</font></p><p><font face="华文中宋" size="3">这个方法理解起来有点儿绕,我先来讲讲,这一块儿看懂了,咱们再往下走<br>先回到现实生活中,投票的时候咱们是怎么投的呢?大家每个人都选一个人,然后开始拆开纸团瞅瞅选的是谁,刚开始默认大家都是 0 票,然后纸条上投的是谁,这个人就多一票,最后看谁的票数比较多.<br>回到咱们这个题目,既然是众数,而且出现的次数大于 ⌊ n/2 ⌋ ,那我们可以假设一个数就是要求的众数,同时设置这个数字出现的次数为 0 ,然后和接下来的数字进行比较,如果一样呢,咱们把这个数字出现的次数加上 1 ,如果不一样,就让次数减 1 ,当这个值减到 0 时,说明刚开始假设的数字不是众数,那就换当前的这个数字,继续循环<br>这样最后这个数字出现的次数一定是大于等于 0 的,要不然就不符合 <code>出现的次数大于 ⌊ n/2 ⌋</code> 这个题意了<br>最后,将真正的众数返回即可<br>具体代码可见下面:</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int count = 0 ;</span><br><span class="line">Integer candidate = null;</span><br><span class="line"></span><br><span class="line">    for(int num : nums)&#123;</span><br><span class="line">        if (count == 0)&#123;</span><br><span class="line">            candidate = num;</span><br><span class="line">        &#125;</span><br><span class="line">        count += ( num == candidate ) ? 1 : -1 ;</span><br><span class="line">    &#125;</span><br><span class="line">return candidate;</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">分析一下,这样实现的时间复杂度是 O(n) ,空间复杂度是 O(1)<br>和刚开始使用的方法相比,好了许多</font></p><p><font face="华文中宋" size="3">你有没有更巧妙的方法实现,欢迎评论区和我交流哇<br>最后,感谢您的阅读~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;这个周末刷了几道算法题,把其中一个比较不错的分享给你~&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]14 搞不懂线性结构,非线性结构?</title>
    <link href="https://www.dynamic-zheng.com/posts/d42777bf.html"/>
    <id>https://www.dynamic-zheng.com/posts/d42777bf.html</id>
    <published>2020-04-05T02:46:43.000Z</published>
    <updated>2020-04-05T02:47:47.371Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">在前面文章中介绍的数组,栈,队列这种都是线性结构,在接下来的文章中,会介绍图,这是一种非线性结构.<br>朋友,你是不是一脸问号?啥是线性结构,什么又是非线性结构呢?我怎么区别这两者呢.<br>别慌,一点点来看.<br><a id="more"></a></font></p><h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a><font face="华文中宋" size="3">线性结构</font></h1><p><font face="华文中宋" size="3">我在学习知识的时候,喜欢和以前的知识联系起来.<br>线性结构,我就想到了在学数学的时候,常说的线性相关,或者说这两个变量之间呈线性关系.<br>那么,在数学的定义上,什么是线性关系呢?<br>我就直接把维基百科的定义搬过来了,链接在这儿: <a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E9%97%9C%E4%BF%82" target="_blank" rel="noopener">线性关系</a></font></p><blockquote><p><font face="华文中宋" size="3"> 在现代学术界中，线性关系一词存在 2 种不同的含义。其一，若某数学函数或数量关系的函数图形呈现为一条直线或线段，那么这种关系就是一种线性的关系。其二，在代数学和数学分析学中，如果一种运算同时满足特定的“加性”和“齐性”，则称这种运算是线性的。</font></p></blockquote><p><font face="华文中宋" size="3">咱们着重看第一个含义,和数学上面的定义差不多,大概意思就是 y 和 x 的关系在图中表示为一条直线或线段,比如 y=x ,那么这种关系我们就可以称之为是线性关系.<br>OK ,那 y=x 有什么特殊之处呢?是不是每一个 x 的取值,都唯一对应一个 y 值?<br>Nice !能够想到这一点,就触及到了线性结构的本质,即:数据元素之间存在着”一对一”的线性关系的数据结构就称为 线性结构.</font></p><p><font face="华文中宋" size="3">了解本质之后,咱们应该就很好理解了,像: 线性表,栈,队列,双队列 这种都是线性结构.</font></p><h1 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a><font face="华文中宋" size="3">非线性结构</font></h1><p><font face="华文中宋" size="3">在了解线性结构之后,再来理解非线性结构就好说了.<br>既然线性结构是一对一的关系,那么非线性结构就存在不是一对一的关系了呗,比如一对多?<br>恭喜你,答对了!<br>那么我们常见的: 二维数组,多维数组,树,图 就都是非线性结构了.</font></p><p><font face="华文中宋" size="3">以上就是想要分享的内容了<br>最近感觉自己写文章遇到了瓶颈一般,总是觉得没有写出自己想要的效果<br>关于我的文章,欢迎各位留言和我交流哇</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;在前面文章中介绍的数组,栈,队列这种都是线性结构,在接下来的文章中,会介绍图,这是一种非线性结构.&lt;br&gt;朋友,你是不是一脸问号?啥是线性结构,什么又是非线性结构呢?我怎么区别这两者呢.&lt;br&gt;别慌,一点点来看.&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]13 再来谈散列表</title>
    <link href="https://www.dynamic-zheng.com/posts/45c48476.html"/>
    <id>https://www.dynamic-zheng.com/posts/45c48476.html</id>
    <published>2020-03-28T10:53:19.000Z</published>
    <updated>2020-03-28T10:55:00.692Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">关于散列表入门级的知识,在这篇文章里面写过一些: <a href="https://blog.csdn.net/zll_0405/article/details/102208638" target="_blank" rel="noopener">[算法]散列表( Hash Table)</a><br>咱们今天再来详细讲一讲散列表.<br><a id="more"></a></font></p><h1 id="散列表与数组"><a href="#散列表与数组" class="headerlink" title="散列表与数组"></a><font face="华文中宋" size="3">散列表与数组</font></h1><p><font face="华文中宋" size="3">散列表最重要的就是,给我一个 key 值,我就能知道对应的 value 值.<br>在基础的数据结构里面,哪儿种数据结构能做到这样?<br>是不是数组?只要你给我一个数组的下标,我就能知道这个下标对应的值.<br>所以,散列表用的是数组支持按照下标随机访问数据的特性,散列表就是数组的一种扩展.<br>可以说,如果没有数组的话,就没有散列表.</font></p><h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a><font face="华文中宋" size="3">散列函数</font></h1><p><font face="华文中宋" size="3">OK ,在了解散列表与数组关系之后,咱们来说说散列函数.<br>在上面我们已经知道,散列表和数组的关系,也就是散列表利用了数组访问数据时间复杂度为 O( 1 ) 的特性,但是 value 值,是如何生成 key 值的呢?<br>利用的就是散列函数.<br>在构造散列函数时,有三点基本要求:</font></p><ul><li><font face="华文中宋" size="3">散列函数计算得到的散列值是一个非负整数;</font></li><li><font face="华文中宋" size="3">如果 key1 = key2 ,则经过散列函数散列之后得到的值也应该相等</font></li><li><font face="华文中宋" size="3"> 如果 key1 ≠ key2 ,那么经过散列函数散列之后得到的值也不应该相等</font></li></ul><p><font face="华文中宋" size="3">这三点要求应该挺容易理解的.首先数组下标是从 0 开始的,所以散列函数计算得到的散列值不能是一个非负整数;其次, key 值相等的,那么经过散列函数散列之后得到的 value 值也应该是一样的;当然,如果 key 值不相等,那么经过散列函数散列之后得到的 value 值也应该不一样.<br>这三点要求看起来挺少的,满足一下应该不过分吧?<br>不,太过分了!</font></p><p><font face="华文中宋" size="3">你想想呀, key 值不相等,就要有一个不同的 value 值,比如 “散列表” 这可以是一个 key 值吧?那 “散,列,表” 是不是另外一个 key 值?那 “散列,表” 是不是另外一个 key 值.<br>发现问题了嘛?也就是 key 只要稍微不一样,哪怕是多了一个符号,或者一个字母,就是不一样的 key 值,每一个 key 都要对应一个不同的 value 值,如果要满足这个要求,需要耗费很大的空间时间成本.<br>所以,目前为止,还没有一个完美的散列函数,使得散列之后的 value 值不重复.<br>这就引出了,散列冲突.</font></p><h1 id="散列冲突"><a href="#散列冲突" class="headerlink" title="散列冲突"></a><font face="华文中宋" size="3">散列冲突</font></h1><p><font face="华文中宋" size="3">既然到目前为止,还没有一个完美的散列函数,无法避免散列冲突,那咱们就曲线救国一下,遇到散列冲突了,该如何解决呢?<br>常用的散列冲突解决方法有两类:</font></p><ul><li><font face="华文中宋" size="3">开放寻址法<br><font face="华文中宋" size="3">开放寻址法的核心思想就是,如果出现了散列冲突,那就重新探测一个空闲位置,插入进来.<br>比如很经典的线性探测法:出现了散列冲突?行嘞,那咱们就从当前位置开始,再往下瞅瞅哪儿个位置是空的呗,有空的就插进去<br>比如很经典的二次探测法:出现了散列冲突?好呀,这次探测的下标序列是 +0 ,接下来看看 +1² 的位置有没有空闲,还是没有?那就 +2² 继续下去,直到找到空闲位置为止.</font></font></li><li><font face="华文中宋" size="3">链表法<br><font face="华文中宋" size="3">散列函数散列之后,存放值不再是一个空闲位置,而是一个链表.<br>一个空闲位置只能存放一个值,咱们不用了,改成一个链表,如果有两个值,很简单,这个链表的 next 指针指向要插入的值就好了.</font></font></li></ul><h1 id="散列冲突解决办法适合哪些应用场景"><a href="#散列冲突解决办法适合哪些应用场景" class="headerlink" title="散列冲突解决办法适合哪些应用场景?"></a><font face="华文中宋" size="3">散列冲突解决办法适合哪些应用场景?</font></h1><p><font face="华文中宋" size="3">散列冲突的两种主要解决办法是:开放寻址法 + 链表法.<br>那为什么在 Java 中 LinkedHashMap 就采用链表法来解决冲突,而 ThreadLocalMap 则是通过线性探测法来解决冲突呢?<br>换句话说,在什么场景下使用开放寻址法比较好,在什么场景下使用链表法比较好?这两者之间又有什么优劣呢?</font></p><ul><li><font face="华文中宋" size="3">开放寻址法<br><font face="华文中宋" size="3">咱们先来看开放寻址法:在开放寻址法中,散列表中的数据都存储在数组中,这样就可以有效利用 CPU 缓存来加快查询速度.此外使用这种方法实现的散列表,序列化起来就比较简单.但是链表法中包含指针,序列化起来就没有那么容易.<br>那么,开放寻址法有什么不足呢?我觉得最重要的一点就是,冲突的代价比较高.当出现冲突时,它不像链表那样,直接修改 next 指针就可以了,而是在空闲的位置中寻找,这样就会导致最后找不到空闲位置.<br>所以,如果我们的数据量比较小,填入表中的元素较少时,使用开放寻址法比较合适.这也是为什么 Java 中 ThreadLocalMap 使用开放寻址法解决散列冲突的原因.</font></font></li><li><font face="华文中宋" size="3">链表法<br><font face="华文中宋" size="3">链表法优点在于对内存的利用率比较高.因为链表节点可以在需要的时候创建,而不是在一开始就申请好.<br>其次,在开放寻址法中,如果有大量的散列冲突,就会导致大量的探测再散列,这样会使得性能下降,但是对于链表法来说,不会出现上述情况,只是会使链表长度变长.但即便如此,查找起来也还是快于开放寻址法的.<br>但是链表法因为要存放指针,所以是很消耗内存的.<br>基于以上,如果数据量较大,那么链表指针的内存消耗在很大数据量面前就可以忽略掉.</font></font></li></ul><p><font face="华文中宋" size="3">以上,就是想要分享的内容了,感谢您的阅读哇~</font></p><ul><li><font face="华文中宋" size="3">参考: 极客时间 — &lt;数据结构与算法之美&gt;</font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;关于散列表入门级的知识,在这篇文章里面写过一些: &lt;a href=&quot;https://blog.csdn.net/zll_0405/article/details/102208638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[算法]散列表( Hash Table)&lt;/a&gt;&lt;br&gt;咱们今天再来详细讲一讲散列表.&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]12 你可能知道二分查找,但你肯定不知道还有这样的二分查找!</title>
    <link href="https://www.dynamic-zheng.com/posts/d4eedbd.html"/>
    <id>https://www.dynamic-zheng.com/posts/d4eedbd.html</id>
    <published>2020-03-20T23:53:53.000Z</published>
    <updated>2020-03-20T23:54:51.504Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">对于二分查找,应该不是很陌生.<br>比如,我写了一个数字 23 ,让你在 0-99 里面猜,猜大了或者猜小了我会告诉你,直到猜对为止.<br>为了尽快猜对,你是不是会这样猜?<br><a id="more"></a></font></p><table><thead><tr><th style="text-align:center">次数</th><th style="text-align:center">猜测范围</th><th style="text-align:center">中间数</th><th style="text-align:center">对比大小</th></tr></thead><tbody><tr><td style="text-align:center">第 1 次</td><td style="text-align:center">0 - 99</td><td style="text-align:center">49</td><td style="text-align:center">49 &gt; 23</td></tr><tr><td style="text-align:center">第 2 次</td><td style="text-align:center">0 - 48</td><td style="text-align:center">24</td><td style="text-align:center">24 &gt; 23</td></tr><tr><td style="text-align:center">第 3 次</td><td style="text-align:center">0 - 23</td><td style="text-align:center">11</td><td style="text-align:center">11 &lt; 23</td></tr><tr><td style="text-align:center">第 4 次</td><td style="text-align:center">12 - 23</td><td style="text-align:center">17</td><td style="text-align:center">17 &lt; 23</td></tr><tr><td style="text-align:center">第 5 次</td><td style="text-align:center">18 - 23</td><td style="text-align:center">20</td><td style="text-align:center">20 &lt; 23</td></tr><tr><td style="text-align:center">第 6 次</td><td style="text-align:center">21 - 23</td><td style="text-align:center">22</td><td style="text-align:center">22 &lt; 23</td></tr><tr><td style="text-align:center">第 7 次</td><td style="text-align:center">23</td><td style="text-align:center"></td><td style="text-align:center">√</td></tr></tbody></table><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><font face="华文中宋" size="3">代码实现</font></h1><p><font face="华文中宋" size="3">看起来这个过程蛮简单的,代码实现也挺简单的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  二分查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-20 20:01:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binary</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 数组的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020-3-20 20:03:56</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (( high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ( arr[mid] == value)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( arr[mid] &lt; value)&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">25</span>,<span class="number">27</span>,<span class="number">30</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">66</span>,<span class="number">95</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 BinarySearch </span></span><br><span class="line">        <span class="keyword">int</span> binarySearch = binarySearch(arr,arr.length,<span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(binarySearch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">在写二分查找时,注意三点写出的代码就差不了多少:</font></p><ul><li><font face="华文中宋" size="3">循环退出条件<br>注意是 low &lt;= high ; 而不是 low &lt; high .</font></li><li><font face="华文中宋" size="3"> mid 的取值<br>这里 mid = low + (( high - low)&gt;&gt;1) 这种方式是将除以 2 的操作转化成了位运算,这样对于计算机来说处理速度会更快一些</font></li><li><font face="华文中宋" size="3"> low 和 high 的更新<br>low = mid + 1;  high = mid - 1; 不要写成 low = mid 或者 high = mid ,因为假设 high = 5 , low = 5 时, arr[5] 可能不等于 value ,这样就会导致程序陷入死循环.</font></li></ul><h1 id="二分查找适用场景"><a href="#二分查找适用场景" class="headerlink" title="二分查找适用场景"></a><font face="华文中宋" size="3">二分查找适用场景</font></h1><p><font face="华文中宋" size="3">二分查找的时间复杂度是 O(log n),查找数据的效率很高,但是不是什么情况下都可以使用二分查找.<br>首先,二分查找依赖的是顺序表结构,也就是数组.<br>它可以依赖其他数据结构嘛?比如链表?答案是不能,因为二分查找算法需要按照下标随机访问元素,而链表不能做到.</font></p><p><font face="华文中宋" size="3">其次,二分查找针对的是已经排好序的数据.<br>如果想要使用二分查找,那么数据必须是有序的.<br>数据无序怎么办?那就先排好序咯~<br>否则的话,有可能导致查找不到你想要的数据(不信可以试试,事实会告诉你真相的~<br>那么,既然要求数据有序,所以如果应用场景是频繁对数据进行插入,删除的话,想都不用想,不适合使用二分查找</font></p><p><font face="华文中宋" size="3">最后,数据量如果太小的话,不适合二分查找.<br>如果要处理的数据量非常小,直接顺序遍历就可以了,完全没有必要使用二分查找.<br>什么都会有个度,所以数据量如果太大的话,也不适合二分查找.</font></p><h1 id="二分查找的一些变形"><a href="#二分查找的一些变形" class="headerlink" title="二分查找的一些变形"></a><font face="华文中宋" size="3">二分查找的一些变形</font></h1><p><font face="华文中宋" size="3"> OK ,在掌握基础的二分查找之后,咱们来对它进行一下变形<br>因为比较简单而且容易理解,我就直接上代码了~</font></p><h2 id="查找第一个值等于给定值的元素"><a href="#查找第一个值等于给定值的元素" class="headerlink" title="查找第一个值等于给定值的元素"></a><font face="华文中宋" size="3">查找第一个值等于给定值的元素</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找---查找第一个值等于给定值的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 数组的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-20 20:32:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchEqualFirst</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid]&gt;value)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; value)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果 mid 等于 0 ,说明这个元素是数组的第一个元素</span></span><br><span class="line">            <span class="comment">// 或者 arr[mid-1] 不等于要查找的值,说明此时查找到的元素即为第一个找到等于给定值的元素</span></span><br><span class="line">            <span class="keyword">if</span> ((mid == <span class="number">0</span>)|| (arr[mid - <span class="number">1</span>] != value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找最后一个值等于给定值的元素"><a href="#查找最后一个值等于给定值的元素" class="headerlink" title="查找最后一个值等于给定值的元素"></a><font face="华文中宋" size="3">查找最后一个值等于给定值的元素</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找---查找最后一个值等于给定值的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 数组的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-20 20:39:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchEqualFinal</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high-low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; value)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; value)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mid == n-<span class="number">1</span>) || (arr[mid+<span class="number">1</span>] != value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找第一个大于等于给定值的元素"><a href="#查找第一个大于等于给定值的元素" class="headerlink" title="查找第一个大于等于给定值的元素"></a><font face="华文中宋" size="3">查找第一个大于等于给定值的元素</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找---查找第一个大于等于给定值的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 数组的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-20 20:47:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchFirst</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= value)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mid == <span class="number">0</span>) || (arr[mid - <span class="number">1</span>] &lt; value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找最后一个小于等于给定值的元素"><a href="#查找最后一个小于等于给定值的元素" class="headerlink" title="查找最后一个小于等于给定值的元素"></a><font face="华文中宋" size="3">查找最后一个小于等于给定值的元素</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找---查找最后一个小于等于给定值的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 数组的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-20 20:54:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchFinal</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; value)&#123;</span><br><span class="line">            high = mid -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mid == n-<span class="number">1</span>) || (arr[mid + <span class="number">1</span>] &gt; value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font face="华文中宋" size="3">参考<br>极客时间&lt;数据结构与算法之美&gt;</font></li></ul><p><font face="华文中宋" size="3">以上,感谢您的阅读~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;对于二分查找,应该不是很陌生.&lt;br&gt;比如,我写了一个数字 23 ,让你在 0-99 里面猜,猜大了或者猜小了我会告诉你,直到猜对为止.&lt;br&gt;为了尽快猜对,你是不是会这样猜?&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]11 单链表反转进阶之递归操作( Java 版)</title>
    <link href="https://www.dynamic-zheng.com/posts/9cc5c0a0.html"/>
    <id>https://www.dynamic-zheng.com/posts/9cc5c0a0.html</id>
    <published>2020-03-14T09:21:03.000Z</published>
    <updated>2020-03-19T06:23:13.771Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">在这一篇文章中,关于单链表反转,在 <a href="https://www.dynamic-zheng.com/posts/745fa732.html">[数据结构与算法]04 Link List (链表)及单链表反转实现</a> 中已经写过了,不是使用递归方法来实现的.因为递归不太容易讲清楚.<br><a id="more"></a><br>但是不能因为害怕讲不清楚就不写了,对不对.<br>所以这篇文章来使用递归来实现一下,并且尝试将里面的细节一一剖出来,不废话.</font></p><p><font face="华文中宋" size="3">首先,咱们要先明确,什么是递归.递归就是自己调用自己对吧.比如:有一个函数为 <code>f(n) = f(n-1) * n</code> ,(注意,我这里是举例子,这个函数没有给出递归的结束条件)给 n 赋值为 5 , 则:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--&gt; f(<span class="number">5</span>)</span><br><span class="line">--&gt; <span class="number">5</span> * f(<span class="number">4</span>)</span><br><span class="line">--&gt; <span class="number">5</span> * ( <span class="number">4</span> * f(<span class="number">3</span>))</span><br><span class="line">--&gt; <span class="number">5</span> * ( <span class="number">4</span> * (<span class="number">3</span> * f(<span class="number">2</span>)))</span><br><span class="line">--&gt; <span class="number">5</span> * ( <span class="number">4</span> * ( <span class="number">3</span> * ( <span class="number">2</span> * f (<span class="number">1</span>))))</span><br><span class="line">--&gt; <span class="number">5</span> * ( <span class="number">4</span> * ( <span class="number">3</span> * ( <span class="number">2</span> * <span class="number">1</span>)))</span><br><span class="line">--&gt; <span class="number">5</span> * ( <span class="number">4</span> * ( <span class="number">3</span> * <span class="number">2</span>))</span><br><span class="line">--&gt; <span class="number">5</span> * ( <span class="number">4</span> * <span class="number">6</span> )</span><br><span class="line">--&gt; <span class="number">5</span> * <span class="number">24</span></span><br><span class="line">--&gt; <span class="number">120</span></span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">在看完例子之后,咱们接下来不 BB ,直接 show code:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表反转---递归实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-14 08:47:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseSingleList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">( <span class="keyword">int</span> data , Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;<span class="keyword">return</span>  data;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 初始化单链表</span></span><br><span class="line">        Node node5 = <span class="keyword">new</span> Node(<span class="number">5</span>,<span class="keyword">null</span>);</span><br><span class="line">        Node node4 = <span class="keyword">new</span> Node(<span class="number">4</span>,node5);</span><br><span class="line">        Node node3 = <span class="keyword">new</span> Node(<span class="number">3</span>,node4);</span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="number">2</span>,node3);</span><br><span class="line">        Node node1 = <span class="keyword">new</span> Node(<span class="number">1</span>,node2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用反转方法</span></span><br><span class="line">        Node recursiveList = recursiveList(node1);</span><br><span class="line">        System.out.println(recursiveList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *递归实现单链表反转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 为传入的单链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020-3-14 08:55:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">recursiveList</span><span class="params">(Node list)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果链表为空 或者 链表中只有一个节点,直接返回</span></span><br><span class="line">        <span class="comment">// 也是递归结束的条件</span></span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.next == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">        Node recursive = recursiveList(list.next);</span><br><span class="line">        <span class="comment">// 将 list.next.next 指针指向当前链表 list</span></span><br><span class="line">        list.next.next = list ;</span><br><span class="line">        <span class="comment">// 将 list.next 指针指向 null</span></span><br><span class="line">        list.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 返回反转之后的链表 recursive</span></span><br><span class="line">        <span class="keyword">return</span> recursive;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">经过上面的代码,应该能够看到核心代码就是,递归实现单链表反转部分的那 5 行代码,别小看了这 5 行代码,想要真正弄清楚还真的挺不容易的.<br>我把这 5 行代码贴在这里,咱们一行行分析,争取看完这篇博客就能懂~(注释我就去掉了,咱们专心看这几行核心代码)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.next == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">Node recursive = recursiveList(list.next);</span><br><span class="line">list.next.next = list ;</span><br><span class="line">list.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> recursive;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">第一行就是一个判断,条件不满足,那就往下走,第二行是自己调用自己,程序又回到第一行,不满足条件程序向下执行,自己调用自己<br>就这样循环到符合条件为止,那么什么时候符合条件呢?也就是 <code>list == null</code> 或者 <code>list.next == null</code> 时,看一下自己定义的链表是 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</code> ,所以符合条件时,此时的链表为 <code>5-&gt;null</code> ,符合条件之后,程序继续向下执行,在执行完 <code>Node recursive = recursiveList(list.next);</code> 这行代码之后,咱们来看一下此时的程序执行结果:<br><img src="/images/2020/oneRecursive.jpg"></font></p><p><font face="华文中宋" size="3">我把上面这个给画出来(画工不好,不要在乎它的美丑~)<br><img src="/images/2020/one.jpg"></font></p><p><font face="华文中宋" size="3">接下来程序该执行 <code>list.next.next = list</code> 执行结束之后,链表大概就是这个样子:<br><img src="/images/2020/two.jpg"></font></p><p><font face="华文中宋" size="3">那是图,下面是程序断点调试程序的结果,发现和上面的图是一样的:<br><img src="/images/2020/twoRecursive.jpg"></font></p><p><font face="华文中宋" size="3">程序继续向下走 <code>list.next = null</code> ,也就是说,将 list 的 next 指针指向 null :<br><img src="/images/2020/three.jpg"></font></p><p><font face="华文中宋" size="3">从图中看到, list 为 <code>4-&gt;null</code> , recursive 为 <code>5-&gt;4-&gt;null</code> ,咱们来看看程序的结果,是不是和图相符:<br><img src="/images/2020/threeRecursive.jpg"></font></p><p><font face="华文中宋" size="3">完全一样有没有!<br>OK ,还记得咱们刚开始的递归函数例子嘛?现在执行完毕,开始执行下一次,咱们继续来看,此时的链表是这个样子的:<br><img src="/images/2020/four.jpg"></font></p><p><font face="华文中宋" size="3">接下来程序执行的代码就是四行了:</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node recursive = recursiveList(list.next);</span><br><span class="line">list.next.next = list ;</span><br><span class="line">list.next = null;</span><br><span class="line">return recursive;</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">继续执行程序,咱们来看结果,将 <code>list.next.next = list</code> 运行结束时,此时链表为:<br><img src="/images/2020/five.jpg"></font></p><p><font face="华文中宋" size="3">从图中能够看到,链表 list 为 <code>3-&gt;4-&gt;3-&gt;4</code> 循环中, recursive 为 <code>5-&gt;4-&gt;3-&gt;4-&gt;3</code> 循环,咱们看一下程序是不是也是如此(在这里我截了两个循环作为示例):<br><img src="/images/2020/fiveRecursive.jpg"></font></p><p><font face="华文中宋" size="3">接下来程序执行 <code>list.next = null</code> ,执行完毕之后,就是将 list 的 next 指针指向 null :<br><img src="/images/2020/six.jpg"></font></p><p><font face="华文中宋" size="3">从图中能够看出来, list 为 <code>3-&gt;null</code> , recursive 为 <code>5-&gt;4-&gt;3-&gt;null</code> ,上图看看实际结果和分析的是否一致:<br><img src="/images/2020/sixRecursive.jpg"></font></p><p><font face="华文中宋" size="3">说明什么?!<br>说明咱们上面的分析是正确的~<br>接下来的程序分析,读者就自行研究吧`<br>相信接下来的分析就难不倒你了~</font></p><h1 id="反转单链表的前-N-个节点"><a href="#反转单链表的前-N-个节点" class="headerlink" title="反转单链表的前 N 个节点"></a><font face="华文中宋" size="3">反转单链表的前 N 个节点</font></h1><p><font face="华文中宋" size="3">OK ,咱们趁热打铁一下,刚刚是通过递归实现了整个单链表反转,那如果我只是想反转前 N 个节点呢?<br>比如单链表为 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</code> ,现在我只想反转前三个节点,变为 <code>3-&gt;2-&gt;1-&gt;4-&gt;5-&gt;null</code><br>有没有想法?<br>咱们进行整个单链表反转时,可以理解为传递了一个参数 n ,这个 n 就是单链表的长度,然后递归程序不断调用自己,然后实现了整个单链表反转.<br>那么,如果我想要反转前 N 个节点,是不是传递一个参数 n 来解决就好了?<br>咱们就直接上代码了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *反转单链表前 n 个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 为传入的单链表 , n 为要反转的前 n 个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-14 09:13:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node next;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverseListN</span><span class="params">(Node list,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 要进行反转链表时,先将 list 后的节点数据保存到 next 中</span></span><br><span class="line">        next = list.next;</span><br><span class="line">        <span class="keyword">return</span>  list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node reverse = reverseListN(list.next , n-<span class="number">1</span>);</span><br><span class="line">    list.next.next = list;</span><br><span class="line">    <span class="comment">// 将 list.next 的指针指向没有进行反转的链表</span></span><br><span class="line">    list.next = next ;</span><br><span class="line">    <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><h1 id="反转单链表的一部分"><a href="#反转单链表的一部分" class="headerlink" title="反转单链表的一部分"></a><font face="华文中宋" size="3">反转单链表的一部分</font></h1><p><font face="华文中宋" size="3">既然反转整个单链表实现了,反转前 N 个节点实现了,那么如果有个需求是反转其中的一部分数据呢?大概就是这样,原来的链表为 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</code> ,反转其中的一部分,使反转后的链表为 <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;null</code><br>借用反转前 N 个节点的思路,是不是我传两个参数进来,一个是开始反转的节点,一个是结束反转的节点,然后递归操作就可以了?<br>瞅瞅代码是怎么写的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *反转部分单链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 为传入的单链表, m 为开始反转的节点, n 为结束的反转节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-3-14 09:32:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverseBetween</span><span class="params">(Node list , <span class="keyword">int</span> m , <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> reverseListN(list,n);</span><br><span class="line">    &#125;</span><br><span class="line">    list.next = reverseBetween(list.next,m-<span class="number">1</span>,n-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">大早上就开始写代码验证 + 写这篇文章,终于给弄清楚了<br>最后两个例子,读者们可以自行研究,我这里因为篇幅的问题就不进行解析了,如果第一个例子自己能够剖析清楚,下面两个也没啥大问题~</font></p><p><font face="华文中宋" size="3">以上,就是这篇文章想要分享的内容啦<br>感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;在这一篇文章中,关于单链表反转,在 &lt;a href=&quot;https://www.dynamic-zheng.com/posts/745fa732.html&quot;&gt;[数据结构与算法]04 Link List (链表)及单链表反转实现&lt;/a&gt; 中已经写过了,不是使用递归方法来实现的.因为递归不太容易讲清楚.&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[工具集]介绍一波我常用的小工具</title>
    <link href="https://www.dynamic-zheng.com/posts/22ced40a.html"/>
    <id>https://www.dynamic-zheng.com/posts/22ced40a.html</id>
    <published>2020-03-06T13:07:57.000Z</published>
    <updated>2020-03-06T13:13:13.946Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">和很多人交流之后,我发现很多我以为大家都知道的小工具,到最后只是我以为.<br>既然这样,这篇文章就分享一波~<br><a id="more"></a><br>如果你那里也有好的小工具,欢迎评论区交流<br>毕竟,你有一个苹果,我有一个梨,咱俩一交流,就有了两种水果可以吃,哈哈哈</font></p><h1 id="技术"><a href="#技术" class="headerlink" title="技术."></a><font face="华文中宋" size="3">技术.</font></h1><p><font face="华文中宋" size="3">技术上,我喜欢有事没事逛逛 github ,这应该是程序员/程序媛们的标配吧?<br>上面开源的项目,很多质量都非常高,能够从里面学习到很多东西.给个传送门:  <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>还有个网站: <a href="https://stackoverflow.com" target="_blank" rel="noopener">stackoverflow</a></font></p><p><font face="华文中宋" size="3">站在巨人的肩膀上,能够走得更快.<br>在编程这个道路上,我特别佩服耗子叔,所以常常有事没事就刷他的网站.<br>每次觉得迷茫了,不知道要做什么了,就去刷一刷大佬的网站,然后收获就很多: <a href="https://coolshell.cn/" target="_blank" rel="noopener">酷 壳 – CoolShell</a></font></p><p><font face="华文中宋" size="3">在学习上,肯定也少不了理论的补充,我喜欢去极客时间: <a href="https://time.geekbang.org/" target="_blank" rel="noopener">极客时间</a></font></p><p><font face="华文中宋" size="3">在写博客的时候,很多情况下都需要画图,而且是很好看的那种,这个时候推荐 ProcessOn : <a href="https://www.processon.com/;jsessionid=198BBBBCD99C1191E9265342EA9F1D95.jvm1" target="_blank" rel="noopener">ProcessOn</a> ,支持将文件导出,也是很方便</font></p><h1 id="提升认知"><a href="#提升认知" class="headerlink" title="提升认知"></a><font face="华文中宋" size="3">提升认知</font></h1><p><font face="华文中宋" size="3">想要提升认知,读书是必不可少的,给一份书单: <a href="https://www.douban.com/note/686630327/" target="_blank" rel="noopener">北京地铁书单：理想的地铁是图书馆的模样（396种+持续更新）</a><br>现在微信读书上面的书籍是挺多的了,特别是出了网页版,很方便,抱个电脑,一天的阅读就都有了: <a href="https://weread.qq.com/" target="_blank" rel="noopener">微信读书</a><br>如果微信读书上没有,也可以来这里搜书看看有没有: <a href="https://obook.cc/" target="_blank" rel="noopener">偶书</a><br>可以这么说,微信读书 + NeatReader 覆盖了我 90% 的阅读需求. NeatReader 是一个 epub 阅读器,花钱买个终身会员,在任何平台都可以看自己存储的书籍,爽的一批,你可以尝试一下</font></p><p><font face="华文中宋" size="3">读完书之后,不能只是读完书对吧?最好还能写写读后感,我比较喜欢用 Notion 来做记录,但是 Notion 对新手很不友好,很多功能都需要你自己去尝试,而且吧,还需要 google 账号,如果你没有 google 账号的话,也不知道怎么注册,那我还是建议你忽略这个推荐好了,因为没有 google 账号也不知道怎么注册,我觉得大概率都是懒得摸索,那这个网站大概率你也不会怎么探索.<br>既然推荐了,还是给个传送门: <a href="https://www.notion.so/?r=a4ce1b04924f4686824c5492db62a3b2" target="_blank" rel="noopener">Notion</a><br>给大家看一下 Notion 界面,我喜欢黑色,酷酷的~<br><img src="/images/2020/notion.jpg"></font></p><p><font face="华文中宋" size="3">最后推荐一位跨境电商的大佬博客: <a href="http://www.guxiaobei.com/history-articles.html" target="_blank" rel="noopener">顾小北的 B2C 博客</a><br>看这个博客,能让你增长很多见识.真的,程序员/程序媛别限制自己.<br>至于这位大佬多厉害呢:大学毕业就已经挣够了百万,现在已经挣够 1 个亿了,重点是,他还年轻啊!!!羡慕的一批<br>所以没事多看看大佬的文章,多瞅瞅人家的思维模式,收获颇丰.</font></p><h1 id="chrome-常用插件"><a href="#chrome-常用插件" class="headerlink" title=" chrome 常用插件"></a><font face="华文中宋" size="3"> chrome 常用插件</font></h1><p><font face="华文中宋" size="3">chrome 插件有很多,但是我这里只推荐 6 个.<br><img src="/images/2020/chrome插件.jpg"></font></p><p><font face="华文中宋" size="3">第一个插件就不用多说了,安装上之后,界面清爽了很多.<br>第二个插件是清空访问网站记录的,我这个人有强迫症,每次浏览器关闭之前,都会将访问的历史记录清空一下,有了这个插件,一键搞定.<br>第三个插件是一个非常漂亮的标签页<br>第四个 + 第六个插件,是在 github 上用的.<br>第五个插件是为了保存网页,不知道你有没有这样一个痛点:我在手机上发现了一个好网站,也想在电脑上访问;同样我在电脑上发现了一个好的网站,也想在手机上访问,这个插件就可以完美解决以上困境.发现一个好的网站,直接鼠标右键将网站保存到这里,然后手机上也装上这个软件就可以在手机上也访问了.</font></p><h1 id="windows-系统下常用插件"><a href="#windows-系统下常用插件" class="headerlink" title="windows 系统下常用插件"></a><font face="华文中宋" size="3">windows 系统下常用插件</font></h1><p><font face="华文中宋" size="3">每次我的电脑重装系统之后,第一件事情就是把下面这 4 个软件装上,要不然会觉得不舒服.<br><img src="/images/2020/windows小工具.jpg"></font></p><p><font face="华文中宋" size="3">第一个软件是 WGestures ,这个软件是鼠标手势.复制粘贴你还在用 Ctrl + c/v 嘛? out 啦~用这个插件,只需要鼠标右键操作即可.<br>还有一点是我常用的:比如和别人聊天,突然发过来一个名字我不知道,想搜索怎么办?你是不是需要打开浏览器,然后输入关键字回车?使用这个软件的话,直接鼠标右键就可以搞定!<br>还有很多很强大的功能,在这里就不多做介绍了,读者可以自行尝试~<br>来个传送门: <a href="http://www.yingdev.com/projects/wgestures" target="_blank" rel="noopener">WGestures 全局鼠标手势</a></font></p><p><font face="华文中宋" size="3">第二个软件是 Listary .<br>这个软件以前写过一篇文章,我就不详细介绍了: <a href="https://blog.csdn.net/zll_0405/article/details/77815032" target="_blank" rel="noopener">Listary 的使用</a></font></p><p><font face="华文中宋" size="3">第三个软件是 Snipaste .这个是一个截图软件.<br>看到这里你可能会说,截图我用微信或者 QQ 截图就可以呀.但是这个截图软件有一个很特殊的功能: 贴图.<br>在码代码的时候,你有没有一种冲动,想把这几行代码固定在屏幕上不动,和正常的代码对比着看,瞅瞅到底哪里有错误.那么,这个软件可能是你需要的.<br>最重要的是,很方便,直接 F1 就将程序调用出来.<br>同样,来个传送门: <a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a></font></p><p><font face="华文中宋" size="3">第四个软件,你熟悉的话就知道怎么用,不熟悉的话,我也就不介绍了.</font></p><p><font face="华文中宋" size="3">以上,就是我比较常用的各种网站 + 软件 + 小工具,是我压箱底的分享了.<br>不知道你有没有想和我分享的?<br>感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;和很多人交流之后,我发现很多我以为大家都知道的小工具,到最后只是我以为.&lt;br&gt;既然这样,这篇文章就分享一波~&lt;br&gt;
    
    </summary>
    
      <category term="工具集" scheme="https://www.dynamic-zheng.com/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="工具集" scheme="https://www.dynamic-zheng.com/tags/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]10 直接插入排序( Java 版)</title>
    <link href="https://www.dynamic-zheng.com/posts/df2b73be.html"/>
    <id>https://www.dynamic-zheng.com/posts/df2b73be.html</id>
    <published>2020-02-29T08:12:08.000Z</published>
    <updated>2020-03-19T06:07:25.128Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">直接插入排序,当你看到这几个字的时候,首先第一想法是什么?<br><a id="more"></a></font></p><p><font face="华文中宋" size="3">我第一想法是在我斗地主的时候,比如我的牌是 5,J,K 下一张牌是 8 ,那我就直接把它放在 5 和 J 之间,此时手里面的牌就是 5,8,J,K 再来一张牌是 4 ,那就放在最前面,此时是 4,5,8,J,K 又来一张牌是 10 ,那就直接把它放在 8 和 J 之间,就是 5,8,10,J,K .(原谅我有点儿强迫症,一定要把牌从大到小码好才觉得顺眼)<br>发现规律了嘛?在我手里面的牌是有序的,没有在我手里面的牌则是无序的,然后我一张一张的从无序的牌里面抽出来,然后和我手里面的牌进行比较,看看抽到的这张牌将它放在哪个位置比较好.<br>如果找到了合适的位置,就直接插入进去就可以了.<br>上面的这个过程,就是直接插入排序的体现.</font></p><p><font face="华文中宋" size="3">上面的描述比较口语化,咱们用术语来说一下原理(显得我比较有文化,哈哈哈):</font></p><ul><li><font face="华文中宋" size="3">将 n 个待排序的元素看成是一个有序表和无序表</font></li><li><font face="华文中宋" size="3">每次从无序表中取出第一个元素,把它插入到有序表的合适位置,使得有序表从整体来看依然有序.</font></li><li><font face="华文中宋" size="3">第一趟比较前两个数,然后把第二个数按照大小插入到有序表中;第二趟将第三个数据与前面两个数据进行比较,将第三个数据插入到有序表合适的位置中</font></li><li><font face="华文中宋" size="3">按照这样的步骤依次进行下去,进行了 n-1 趟扫描以后,就整个待排序列排好了.</font></li></ul><p><font face="华文中宋" size="3">从上面的步骤中,应该能够体会到,直接插入排序有两层嵌套循环.<br>第一层是外循环,标识待比较的数值,也就是从无序表中取出来的那个值.<br>第二层是内循环,是为了确定从无序表中取出的值的最终位置.<br>但是外循环是从第二个数开始比较的,因为直接插入排序是将待比较的数值与它的前一个数值进行比较,如果没有前一个数值,也就没有直接插入排序这一说.</font></p><p><font face="华文中宋" size="3">OK ,理论知识补充完毕了,咱们来看看代码上是如何实现的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序代码实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-1-25 11:39:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StraightInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">straightInsert</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义变量</span></span><br><span class="line">        <span class="keyword">int</span> i , j , insertNote;</span><br><span class="line">        <span class="comment">// 从数组的第二个元素开始循环,将数组中的元素插入</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">// 第一次循环,假设第 2 个元素为要插入的元素</span></span><br><span class="line">            insertNote = arr[i];</span><br><span class="line">            j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; insertNote &lt; arr[j])&#123;</span><br><span class="line">                <span class="comment">// 如果要插入的元素小于第 j 个元素,就将第 j 个元素向后移动</span></span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 要插入的元素大于第 j 个元素时,将要插入的数据插入到数组中</span></span><br><span class="line">            arr[j+<span class="number">1</span>] = insertNote;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">456</span>,<span class="number">741</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line">        straightInsert(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">以上,就是想要分享的内容啦~<br>感谢您的阅读哇<br>有什么更好的实现方法更欢迎评论区交流~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;直接插入排序,当你看到这几个字的时候,首先第一想法是什么?&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]09 冒泡排序( Java 版)</title>
    <link href="https://www.dynamic-zheng.com/posts/9e1c66c3.html"/>
    <id>https://www.dynamic-zheng.com/posts/9e1c66c3.html</id>
    <published>2020-02-29T02:37:51.000Z</published>
    <updated>2020-03-19T06:07:52.218Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">当你想到冒泡的时候,第一反应是什么?<br>我这个人比较喜欢可口可乐,所以当看到冒泡,我的第一反应就是喝可乐的时候,有一个个的小泡泡冒出来,如果你仔细观察过的话,会看到这个小泡泡刚开始很小,但是等冒上来的时候,就比较大了.<br><a id="more"></a></font></p><p><font face="华文中宋" size="3">上面大概就是一个描述,咱们根据上面的描述,详细说说原理:</font></p><ul><li><font face="华文中宋" size="3">1 ,比较相邻的元素.如果第一个比第二个大,就交换他们两个</font></li><li><font face="华文中宋" size="3">2 ,对接下来的每一对相邻元素都做同样的比较,从开始第一对到结尾的最后一对.<br>还记得第 1 条嘛?如果第一个比第二个大,那么就交换他们两个,对不对?所以,这样一轮结束之后,最后一个值是这些数中最大的值.</font></li><li><font face="华文中宋" size="3">3 ,针对所有的元素重复 1,2 的步骤,除了最后一个元素.<br>因为最后一个元素咱们已经确定了是最大的了,所以接下来的排序就不再担心了.</font></li><li><font face="华文中宋" size="3">4 ,持续 1,2,3 直到所有排序完毕.</font></li></ul><p><font face="华文中宋" size="3">看完原理之后,我们就能知道,冒泡排序就是将大的元素向后调,比较发生在两个元素之间,交换也是发生在这两个元素之间,也就是说,假设第一个数小于第二个数,那么接下来第一个数总是在第二个数前面,相对位置总是不变的.<br>所以,我们说冒泡排序是一种稳定的算法.<br>当然了,冒泡排序也可以将小的元素向后调,这些都取决于你怎么制定规则,你最大,你说了算~</font></p><p><font face="华文中宋" size="3">上面介绍完毕了,咱们就直接上代码来看看.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  冒泡排序实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-1-19 08:49:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">         <span class="comment">// 定义变量</span></span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">                <span class="comment">// 如果前面的数字,大于后面的数字,则进行交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j-<span class="number">1</span>]&gt;arr[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp;</span><br><span class="line">                    temp = arr[j-<span class="number">1</span>];</span><br><span class="line">                    arr[j-<span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">456</span>,<span class="number">741</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr,arr.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">上面的就能实现冒泡排序,但是今天在写这篇博客,看书的时候,发现了一个很巧的方法,我也贴出来:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anomalous.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  冒泡排序实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-2-29 09:36:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 标识变量,表示是否进行过交换</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果前面的数比后面的数大,则交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">// 改变标识变量为 true</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 在一趟排序中,一次交换都没有发生过</span></span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 重置 flag ,进行下次判断</span></span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">456</span>,<span class="number">741</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr,arr.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font></p><p><font face="华文中宋" size="3">如果仔细看的话,你会发现引入了一个标识变量.<br>这个标识变量有什么作用呢?如果你感兴趣可以运行一下程序,观察一下比较次数,会发现第二种方法程序的运行次数是比第一次的运行次数少的.<br>为什么呢?你想想,其实最后一趟排序的时候,整体已经排好了,但是第一种方法会再次进行排序,第二种因为有标识变量的存在,如果一次交换都没有发生过,说明此时整个数组已经有序,所以不会再进行排序一次.<br>只是因为多了一个标识变量,就节省了时间,这种思路,很巧妙~</font></p><p><font face="华文中宋" size="3">以上,就是想要分享的内容了.<br>感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;当你想到冒泡的时候,第一反应是什么?&lt;br&gt;我这个人比较喜欢可口可乐,所以当看到冒泡,我的第一反应就是喝可乐的时候,有一个个的小泡泡冒出来,如果你仔细观察过的话,会看到这个小泡泡刚开始很小,但是等冒上来的时候,就比较大了.&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[操作系统]关于 Windows 文件访问方式,你可能真的不是很了解</title>
    <link href="https://www.dynamic-zheng.com/posts/34678e11.html"/>
    <id>https://www.dynamic-zheng.com/posts/34678e11.html</id>
    <published>2020-02-22T10:49:12.000Z</published>
    <updated>2020-02-22T10:51:40.748Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">在 Windows 操作系统下,想要访问文件时,一般有以下三种方式:</font></p><ul><li><font face="华文中宋" size="3">不使用文件缓存</font></li><li><font face="华文中宋" size="3">使用文件缓存</font></li><li><font face="华文中宋" size="3">异步模式<a id="more"></a><font face="华文中宋" size="3">动动小脑就应该知道,最常用的是「使用文件缓存」这种方式(好吧,小脑是为了保证身体平衡,不是为了思考;<br>接下来就说说,在 Windows 操作系统下,当我们以「使用文件缓存」这种方式来访问文件时,操作系统所做的事情.</font></font></li></ul><p><font face="华文中宋" size="3">使用文件缓存访问:</font></p><ul><li><font face="华文中宋" size="3">由 Windows 的 Cache Manager 实现对缓存的控制,读取数据时,进行预取<ul><li><font face="华文中宋" size="3">如果 Cache 满了怎么办?<br><font face="华文中宋" size="3">Cache Manager 会根据 LRU ( Least Recently Used ,最近最少使用)原则,来清除一些缓存内容<br>同时还需要定期更新磁盘内容,让磁盘内容和 Cache 中保持一致(通常是 1 秒更新一次)</font></font></li></ul></font></li><li><font face="华文中宋" size="3">Write-back 机制:<ul><li><font face="华文中宋" size="3">在对文件进行访问时,会涉及到对文件的一些修改,这就涉及到了对磁盘写数据<br>此时,我们不直接对磁盘进行更改,而是只更改 Cache 中的内容,然后由 Cache Manager 决定什么时候将用户所做的更新反映到磁盘上<ul><li><font face="华文中宋" size="3">为什么不直接对磁盘进行更改?<br>对任何操作系统来说, I/O 的读写速度永远都是硬伤,如果频繁对磁盘进行 I/O 操作,会使得系统性能降低</font></li></ul></font></li></ul></font></li></ul><p><font face="华文中宋" size="3">画一个图,能够更直观的看到(请忽略我的画图水平):<br><img src="/images/2020/file.jpg"></font></p><p><font face="华文中宋" size="3">如上图,阴影部分表示需要访问的数据.<br>数据在磁盘,系统缓存和进程地址空间有 3 份拷贝,通常情况下用户对数据的修改并不直接反映到磁盘上,而是通过 write-back 机制定期更新到磁盘上.</font></p><p><font face="华文中宋" size="3">为了尽可能提高读取速度,我们应该将要存储的数据,尽量放在同一个柱面上.</font></p><p><font face="华文中宋" size="3">以上,就是想要分享的内容<br>感谢您的阅读~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;在 Windows 操作系统下,想要访问文件时,一般有以下三种方式:&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;不使用文件缓存&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;使用文件缓存&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;异步模式
    
    </summary>
    
      <category term="操作系统" scheme="https://www.dynamic-zheng.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://www.dynamic-zheng.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>[操作系统]当双击某程序到它显示运行界面时,操作系统做了什么</title>
    <link href="https://www.dynamic-zheng.com/posts/e6161cda.html"/>
    <id>https://www.dynamic-zheng.com/posts/e6161cda.html</id>
    <published>2020-02-15T10:41:53.000Z</published>
    <updated>2020-02-15T10:43:44.245Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">继<a href="https://www.dynamic-zheng.com/posts/ebb383b9.html#more">[计算机网络]从页面输入网址,回车到显示内容,这中间到底经历了什么</a>这篇文章之后,我突然发现我对计算机网络的一些知识串了起来,它们对我来说不再是一个个的单独个体.<br>基于这个经验,我再来梳理一下当双击某程序到它显示运行界面时,操作系统做了什么,尝试将操作系统的一些东西,也串起来.<br><a id="more"></a></font></p><p><font face="华文中宋" size="3">假设:我们现在想要让操作系统运行「微信」,那么首先我们会怎么做?</font></p><ul><li><p><font face="华文中宋" size="3"> 1 ,双击微信图标.<br>但是打开一个程序的方式不止一种,不要限制了自己,比如也可以通过命令行键入命令的方式将它打开(不过一般不会这么做吧;<br>当我们双击了微信图标时,就告诉了操作系统,我希望你能帮我运行「微信」</font></p></li><li><p><font face="华文中宋" size="3"> 2 ,此时操作系统接收到请求之后,就去磁盘上找到「微信」程序的相关信息,检测它的类型是不是可执行文件,同时通过程序首部信息确定代码和数据在可执行文件中的位置并且计算出对应的磁盘块地址.</font></p><ul><li><font face="华文中宋" size="3">看完上面的解释,你有疑问嘛?操作系统怎么检测它是不是可执行文件呢?对于 Windows 系统来说,可执行文件是 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E5%8F%AF%E6%89%A7%E8%A1%8C" target="_blank" rel="noopener">PE(Portable Executable)</a>,对于 Linux 系统来说,可执行文件是 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%9F%B7%E8%A1%8C%E8%88%87%E5%8F%AF%E9%8F%88%E6%8E%A5%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">ELF(Executable and Linkable Format)</a>,对于 Mac 系统来说,可执行文件是<a href="https://zh.wikipedia.org/wiki/Mach-O" target="_blank" rel="noopener">Mach-O(Mach Object)</a></font></li></ul></li><li><p><font face="华文中宋" size="3"> 3 ,操作系统做完第 2 步之后,就会创建一个进程,并且将「微信」的可执行文件映射到该进程结构,意思就是,这个进程负责执行「微信」程序.</font></p></li><li><font face="华文中宋" size="3"> 4 ,接下来操作系统会为「微信」程序设置 CPU 上下文环境,此时我们假设这个调度程序选中了「微信」程序,那么操作系统就会跳到程序开始处</font></li><li><font face="华文中宋" size="3"> 5 ,接下来执行「微信」程序的第一条指令.<br>但是它会发生缺页异常.<ul><li><font face="华文中宋" size="3">为什么会发生缺页异常?<br>因为程序在执行时,要将代码和数据读入内存, CPU 才能执行,但此时因为内存中还没有相关数据,进而触发了硬件机制,捕获到缺页异常,将控制权交给操作系统</font></li></ul></font></li><li><font face="华文中宋" size="3"> 6 ,操作系统此时会分配一页物理内存,同时将代码从磁盘读入内存,然后继续执行「微信」程序.<br>如果程序很大,一页内存不够的话,会在执行过程中重复 5,6 步骤,直至将程序全部读入内存为止</font></li><li><font face="华文中宋" size="3"> 7 ,之后,「微信」程序执行相关函数(系统调用),在显示器上显示「微信」图标</font></li><li><font face="华文中宋" size="3"> 8 ,操作系统接收到这个请求,然后找到显示设备,通常显示设备是由一个进程控制的,所以操作系统将要显示的「微信」图标给该进程</font></li><li><font face="华文中宋" size="3"> 9 ,控制设备的进程告诉设备的窗口系统它要显示「微信」图标,窗口系统在确定这是一个合法的操作之后,会将「微信」图标转换成像素,将像素写入设备的存储映像区</font></li><li><font face="华文中宋" size="3"> 10 ,视频硬件将像素转换成显示器可以接收的一组控制数据信号</font></li><li><font face="华文中宋" size="3"> 11 ,显示器解释数据信号,激发液晶屏<br>此时,我们就能够在屏幕上看到「微信」的登录界面.</font></li></ul><p><font face="华文中宋" size="3">至此,当我们双击某个程序,到显示运行界面时,操作系统做的工作我们就比较清楚了.</font></p><p><font face="华文中宋" size="3">这篇文章的灵感来源于:</font></p><p><font face="华文中宋" size="3"><a href="https://www.bilibili.com/video/av9555596?t=4" target="_blank" rel="noopener">操作系统做了什么?</a></font></p><p><font face="华文中宋" size="3">以上,非常感谢您的阅读~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;继&lt;a href=&quot;https://www.dynamic-zheng.com/posts/ebb383b9.html#more&quot;&gt;[计算机网络]从页面输入网址,回车到显示内容,这中间到底经历了什么&lt;/a&gt;这篇文章之后,我突然发现我对计算机网络的一些知识串了起来,它们对我来说不再是一个个的单独个体.&lt;br&gt;基于这个经验,我再来梳理一下当双击某程序到它显示运行界面时,操作系统做了什么,尝试将操作系统的一些东西,也串起来.&lt;br&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://www.dynamic-zheng.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://www.dynamic-zheng.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>[计算机网络]从页面输入网址,回车到显示内容,这中间到底经历了什么</title>
    <link href="https://www.dynamic-zheng.com/posts/ebb383b9.html"/>
    <id>https://www.dynamic-zheng.com/posts/ebb383b9.html</id>
    <published>2020-02-14T13:03:45.000Z</published>
    <updated>2020-02-14T13:10:52.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><font face="华文中宋" size="3">写在前面</font></h1><p><font face="华文中宋" size="3">在学习计算机网络的内容时,脑子里面突然冒出来一个问题:当我们在一个浏览器界面输入网址,回车到界面显示内容,这中间经历了什么?<br>先不要往下看,你能想到什么?<br>下面是我能想到的过程,有可能不是很准确,如有错误之处,还望指出.<br><a id="more"></a></font></p><p><font face="华文中宋" size="3">计算机网络大体上可以分为应用层,传输层,网络层,链路层和物理层.<br>当我们在页面输入网址,然后回车到显示内容时,我通过上面的层次依次来说.</font></p><h1 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a><font face="华文中宋" size="3">详细过程</font></h1><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><font face="华文中宋" size="3">应用层</font></h2><p><font face="华文中宋" size="3">假设我们现在要访问 google 网站,那么第一步要做的就是打开浏览器,在地址栏中输入 google 的地址,当你点击回车时,浏览器知道你要访问 google 了,但是对于浏览器来说,这只是一个名字,但是具体在哪儿它是不知道的.比如,你知道某位明星的名字,但是他/她具体的地址在哪儿你不清楚,对吧?对于浏览器来说也是这样.<br>比较好的一点是,想要访问网站,不像你想见明星那么难.此时浏览器通过 DNS 找到你要访问的具体网站地址.<br>当然了,如果你想要更准确的找到地址,也可以通过 HTTPDNS 去查找.<br>通过 DNS 或者 HTTPDNS 现在浏览器拿到了具体的 IP 地址,随后它就开始打包你的请求.对于举的例子来说,你只是想要访问一下,一般使用 HTTP 协议就可以了;如果有些请求会涉及到你的账号密码,就会使用 HTTPS 协议来保证你的数据安全.</font></p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a><font face="华文中宋" size="3">传输层</font></h2><p><font face="华文中宋" size="3">到这里, DNS , HTTP , HTTPS 所在的层称之为应用层.<br>现在应用层的事情做完了,接下来应用层会将以上相关数据进行封装,经过 Socket 编程,将应用层的包发送给传输层.<br>如果这个包是使用 HTTP 或者 HTTPS 协议发送过来的,那传输层就会使用 TCP 协议来将数据进行封装;如果是使用 DNS 协议发送过来的,则会使用 UDP 协议来进行封装.<br>封装完毕之后,浏览器就会将包交给操作系统的网络层.</font></p><h2 id="网络层-链路层-物理层"><a href="#网络层-链路层-物理层" class="headerlink" title="网络层 + 链路层 + 物理层"></a><font face="华文中宋" size="3">网络层 + 链路层 + 物理层</font></h2><p><font face="华文中宋" size="3">这一部分会涉及到网络层 + 链路层 + 物理层,我就不分那么详细了~<br>网络层的协议是 IP 协议,在 IP 协议中会有源 IP 地址和目标 IP 地址.<br>源 IP 地址也就是浏览器所在机器的 IP 地址,说的再白点儿就是,假设你是使用电脑浏览器发出的访问请求,这个源 IP 地址就是你的电脑 IP 地址<br>目标 IP 地址就是你想要访问的网站地址.还记得嘛,在应用层,我们根据 DNS 或 HTTPDNS 已经获取到了想要访问网站的具体 IP 地址.<br>OK ,既然此时操作系统已经知道了目标 IP 地址,接下来它就会想我怎么根据这个目标 IP 地址找到这台机器呢.首先操作系统会看这个 IP 地址是不是在局域网内,如果是的话,从目标 IP 地址就能看出来.但是很明显,想要访问的 google 地址不在本地,在那触不到的远方.</font></p><p><font face="华文中宋" size="3">操作系统知道要访问的地址在远方,但是远方在哪儿它也不知道.所以它就将这个数据包发给网关( gateway ),但是它不知道网关是哪儿台机器,这可咋整.<br>没事儿,反正大家都在一个地方,吼一嗓子不就得了~所以操作系统就大吼了一声:咱们的网关是谁来着.网关就会回答它,我就是,我在这儿呢.<br>上面的那一声吼,就是 ARP 协议,通过 ARP 协议,就知道了网关的具体地址,也就是 MAC 地址.<br>接下来这个数据包就到了网关那里.网关一般就是路由器,到某个 IP 地址怎么走,在一个叫做「路由表」中维护着.<br>出网关就比较复杂了,这里就不详细说了,具体可以看这篇文章: <a href="https://www.dynamic-zheng.com/posts/ff423025.html">[计算机网络]想出网关?你需要懂得这些</a></font></p><p><font face="华文中宋" size="3">出了网关之后,就需要拿出源 IP 地址和目标 IP 地址.因为只要出了网关,那就是在外面肉搏,如果没有源 IP 地址和目标 IP 地址,就不知道这个请求是从哪儿发出的,要往哪儿去.<br>现在这个数据包经过了重重关卡,终于找到了目标 IP 地址所在的服务器.此时服务器会首先发送一个接收请求,然后再将数据包一层层解析,在 TCP 头中含有目标端口号,通过这个端口号,就能够找到哪儿个程序的进程正在监听这个端口号,进而我们就找到了我们想要访问的网页.</font></p><p><font face="华文中宋" size="3">但是我怎么知道从我这里发出的数据包有没有丢失呢?所以此时 TCP 层会隔一段时间发送一次,这并不是说,页面又发送了一次请求,只是 TCP 自己在闷头重试,直到收到了接收请求.</font></p><p><font face="华文中宋" size="3">在我们找到了想要访问的网页之后,接下来就会像来的时候,再原路返回去.</font></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后:"></a><font face="华文中宋" size="3">最后:</font></h1><p><font face="华文中宋" size="3">没想到吧~一个简单的打开界面,竟然涉及到了这么多的知识~<br>当然你会发现在你输入网址之后敲回车,页面几乎是立刻出来了,这就涉及到了缓存,再深入讲的话,这篇文章就很长了.</font></p><p><font face="华文中宋" size="3">这里推荐几篇文章,想深入理解的建议读一下:</font></p><p><font face="华文中宋" size="3"><a href="https://www.dynamic-zheng.com/posts/a43453ce.html">[计算机网络] DNS 协议</a></font></p><p><font face="华文中宋" size="3"><a href="https://www.dynamic-zheng.com/posts/4e5d330.html">[计算机网络] HTTPDNS 协议</a></font></p><p><font face="华文中宋" size="3"><a href="https://www.dynamic-zheng.com/posts/d26db2c7.html">[计算机网络]简单聊聊套接字 Socket</a></font></p><p><font face="华文中宋" size="3"><a href="https://www.dynamic-zheng.com/posts/e579f21d.html">[计算机网络] IP 地址与 MAC 地址之间的关系</a></font></p><p><font face="华文中宋" size="3"><a href="https://www.dynamic-zheng.com/posts/ff423025.html">[计算机网络]想出网关?你需要懂得这些</a></font></p><ul><li><font face="华文中宋" size="3">参考:<br>极客时间-趣谈网络协议</font></li></ul><p><font face="华文中宋" size="3">以上,非常感谢您的阅读~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;写在前面&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;在学习计算机网络的内容时,脑子里面突然冒出来一个问题:当我们在一个浏览器界面输入网址,回车到界面显示内容,这中间经历了什么?&lt;br&gt;先不要往下看,你能想到什么?&lt;br&gt;下面是我能想到的过程,有可能不是很准确,如有错误之处,还望指出.&lt;br&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://www.dynamic-zheng.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://www.dynamic-zheng.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>[碎碎念]在嘛,吱一声.吱...</title>
    <link href="https://www.dynamic-zheng.com/posts/bded181d.html"/>
    <id>https://www.dynamic-zheng.com/posts/bded181d.html</id>
    <published>2020-02-07T06:16:37.000Z</published>
    <updated>2020-02-07T06:18:57.996Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">好吧,题目是来搞笑的<br><a id="more"></a></font></p><p><font face="华文中宋" size="3">如果问我过去的一年,最大的收获是什么?仔细想了想,其中一件事应该是认识了明白老师.<br>去年下半年加入明白老师的星球之后,又得以加入他的社群,进而和他本人有了更近的交流,更重要的是,我能近距离观察他.<br>和这篇文章有什么关系?因为我看了他的这篇文章:<a href="https://mp.weixin.qq.com/s/7FkMPMO_yONc_neEUQROVw" target="_blank" rel="noopener">为什么日更比周更容易？收益更大？</a></font></p><p><font face="华文中宋" size="3">任何事情,最难的就是第一步.当你踏出了第一步,就会踏出第二步,进而第三步第四步.<br>看完明白老师的文章之后,让我很触动.<br>说实话,我的博客更新频率挺低的,一周一篇.而且很多时候,不是没有时间和精力去写,而是自己各种犯懒,不想去写.<br>看到明白老师的这篇文章之后,我突然也想将更新的频率提高一些试试,看看自己的感受如何,成长如何.<br>我应该是做不到日更的.毕竟一篇技术文章,从选材,实践到组织语言形成一篇文章,没有两三天的时间写不出来的.(起码对于我这个渣渣来说是这样;<br>日更做不到,周更的频率高一点儿,努努力还是可以做到的.(也或者,我写着写着,突然就日更了呢,哈哈哈;</font></p><p><font face="华文中宋" size="3">之所以下定要将周更的频率再提高一些,除了这篇受明白老师这篇文章启发之外,还因为早些时候一起做的事情.<br>大概是在去年 8 月份,明白老师在群里问,他想要坚持每天做 3 件事,有没有人和他一起.我自然报名,但是我不知道我每天应该做哪些事情.<br>3 件事,一天很容易做到,两天也很容易,但是做到每天,就很难.<br>既然报名了,牛逼吹出去了,硬着头皮也要做下去.<br>那个时候给自己定的 3 件事是:工作,读书,锻炼.<br>也正是每天的这 3 件事,让我工作的时候,认真对待工作;上下班的路上,好好锻炼身体;晚上到家之后,读读书.<br>让我享受到了,诗和远方.<br>更重要的是,在这个过程中,我获得的掌控感,让我变的更加自信.<br>是啊,我能够每天坚持 3 件重要的事情,还有什么是我不能做到的呢.</font></p><p><font face="华文中宋" size="3">每天 3 件事,不贪多不贪少,这样的习惯保持到现在,受益匪浅.<br>也是基于这样的获益,看到明白老师决定日更,并且阐述了为什么日更比周更更容易,收益更大,也让我决定,提高自己的周更频率.</font></p><p><font face="华文中宋" size="3">最近在准备自考,这次考试科目是计算机网络.还有一直在学数据结构和算法的一些东西,所以接下来的博客更新,应该是这两个大方面:计算机网络 + 数据结构和算法<br>可能中间还会夹杂我的碎碎念,就像这一篇.</font></p><p><font face="华文中宋" size="3">总之,今天受了不少的刺激,在接下来的日子里,要好好努力了.<br>各位,可以一起来监督我呀~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;好吧,题目是来搞笑的&lt;br&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="https://www.dynamic-zheng.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="碎碎念" scheme="https://www.dynamic-zheng.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>[数据结构与算法]08 队列( Queue )以及队列实现的三种方式( Java 版)</title>
    <link href="https://www.dynamic-zheng.com/posts/a433947a.html"/>
    <id>https://www.dynamic-zheng.com/posts/a433947a.html</id>
    <published>2020-02-01T08:36:30.000Z</published>
    <updated>2020-02-01T08:39:17.272Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">年初生了一场大病,博客搁了几周,惭愧.今天来一篇.<br><a id="more"></a></font></p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a><font face="华文中宋" size="3">队列</font></h1><p><font face="华文中宋" size="3">说队列的时候,常常会想到栈,因为栈是后进先出,而队列则是先进先出.<br>关于栈,前面已经写过了:<a href="https://www.dynamic-zheng.com/posts/3671c55b.html">[数据结构与算法]05 Stack 经典面试题之判断字符串是否合法( Java 版)</a><br>这篇文章的主要焦点就在队列上了.</font></p><p><font face="华文中宋" size="3">队列,你的第一反应是不是排队?不管是在食堂买饭,还是在银行办理业务,或者进高铁站的时候,都会排队.<br>排队有一个很明显的特点:早来的人,就会早点儿办完事情.<br>这就是队列:先进先出.</font></p><p><font face="华文中宋" size="3">队列可以用数组实现,叫做顺序队列.也可以用链表实现,叫做链式队列.<br>在这里,分别用数组和链表来实现一下.</font></p><h1 id="数组实现队列"><a href="#数组实现队列" class="headerlink" title="数组实现队列"></a><font face="华文中宋" size="3">数组实现队列</font></h1><p><font face="华文中宋" size="3">使用数组来实现队列,相对来说还是比较简单的,因为数组和队列一样都是线性表结构.<br>废话不多说,咱们直接看代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-1-29 15:51:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       数组：items，数组大小：n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       head表示队头下标，tail表示队尾下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       申请一个大小为capacity的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> String[capacity];</span><br><span class="line">        n = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       入队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果tail == n 表示队列已经满了</span></span><br><span class="line">        <span class="keyword">if</span> (tail == n) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        items[tail] = item;</span><br><span class="line">        tail++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       出队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果head == tail 表示队列为空</span></span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String ret = items[head];</span><br><span class="line">        head++;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt; tail; i++) &#123;</span><br><span class="line">            System.out.print(items[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayQueue queue=<span class="keyword">new</span> ArrayQueue(<span class="number">5</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"1"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"2"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"3"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"4"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"5"</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.enqueue(<span class="string">"6"</span>);</span><br><span class="line"></span><br><span class="line">        queue.printAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">使用数组实现队列有个问题,就是删除不是真的删除,只是在打印的时候将 i 的值指向了 head 而已,但是要删除的数据,仍然在数组中.</font></p><h1 id="链表实现队列"><a href="#链表实现队列" class="headerlink" title="链表实现队列"></a><font face="华文中宋" size="3">链表实现队列</font></h1><p><font face="华文中宋" size="3">使用链表实现队列也较为简单:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用链表实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-1-30 09:20:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkListQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        队列的队首和队尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Node tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         入队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(value, <span class="keyword">null</span>);</span><br><span class="line">            head = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> Node(value, <span class="keyword">null</span>);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        出队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String value = head.data;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.data + <span class="string">" "</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String data, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkListQueue queue=<span class="keyword">new</span> LinkListQueue();</span><br><span class="line">        queue.enqueue(<span class="string">"3"</span>);</span><br><span class="line">        queue.enqueue(<span class="string">"2"</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.printAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈实现队列"><a href="#栈实现队列" class="headerlink" title="栈实现队列"></a><font face="华文中宋" size="3">栈实现队列</font></h1><p><font face="华文中宋" size="3">除了使用数组和链表实现,还有一种方法就是使用栈来实现队列.<br>使用栈来实现队列,顾名思义就是只能使用栈的操作: pop , push , peek 等,其他操作不允许出现,否则就不是使用栈来实现队列了.<br>使用数组和链表来实现栈都较为简单,因为在读取数据时,只需要按照顺序读取即可.<br>但是对于栈来说,顺序读取行不通,为什么呢?假设我的队列数据为 1,2,3,4 依次存入栈中之后再读取的话,则是 4,3,2,1 因为栈是后进先出.<br>如果使用栈来实现队列的话,需要用到两个栈.一个栈的输出顺序就是 4,3,2,1 在读取之前,我们把读取出来的数据存入到另外一个栈中,然后从后面这个栈读取,那么输出顺序就是 1,2,3,4 和原来队列的数据一致.<br>在这里要注意一点:当后面的栈中有数据,前面的栈中也有数据时,要先将后面的栈中数据读取完毕,再将前面的数据放到后面的数据中.<br>接下来看下代码实现:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用栈实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑璐璐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-1-30 17:21:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Stack&lt;Integer&gt; stackTemp = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Integer&gt; stackQueue = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       入队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        stackTemp.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        出队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 整个队列不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (empty()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果 stackQueue 为空时,则将 stackTemp 中的数据放入 stackQueue 中</span></span><br><span class="line">            <span class="comment">// 如果 stackQueue 不为空,直接输出即可</span></span><br><span class="line">            <span class="keyword">if</span> (stackQueue.isEmpty())&#123;</span><br><span class="line">                backFill();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stackQueue.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 整个队列为空,则返回 -1 ,代表队列中没有值</span></span><br><span class="line">            System.out.println(<span class="string">"队列为空"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断队列是否为空,如果返回值为 0 ,则代表队列为空</span></span><br><span class="line">        <span class="comment">// 注意,两个栈均为空时,队列才为空</span></span><br><span class="line">        <span class="keyword">return</span> stackQueue.size() + stackTemp.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        将 stackTemp 中的数据放入 stackQueue 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backFill</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stackTemp.isEmpty())&#123;</span><br><span class="line">            stackQueue.push(stackTemp.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        StackQueue stack = <span class="keyword">new</span> StackQueue();</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font face="华文中宋" size="3">以上,就是想要分享的内容了<br>感谢您的阅读哇~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;年初生了一场大病,博客搁了几周,惭愧.今天来一篇.&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.dynamic-zheng.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[年终总结]愿你在以后的黑暗时刻,都能想起我</title>
    <link href="https://www.dynamic-zheng.com/posts/99fcee38.html"/>
    <id>https://www.dynamic-zheng.com/posts/99fcee38.html</id>
    <published>2020-01-01T13:21:48.000Z</published>
    <updated>2020-01-01T13:25:27.234Z</updated>
    
    <content type="html"><![CDATA[<p><font face="华文中宋" size="3">今天是新的一年开始.<br>这次的总结,不想像以前那样细数过去的一年发生了什么,经历了什么,我就随便写了,写到哪儿算哪儿(说白了就是碎碎念<br><a id="more"></a></font></p><p><font face="华文中宋" size="3">过去的一年,我一直都觉得自己像是开挂了一样.自从打破了自己的一个认知局限之后,认识到了很多厉害的人,在和这些人的交流中,也慢慢让我变得很自信.<br>因为我看到他们,之所以能够成功,是因为有耐心,相信自己,敢冒险.反观一下我自己,我身上也有这些,那我和他们的差距就在于时间,所以我相信就目前的状态一直下去,有一天我也会变得很厉害,只不过是时间早晚的问题.<br>这样对于很多事情就不纠结了,主要是纠结也没用,还不如拿这些时间读读书,跑跑步.</font></p><p><font face="华文中宋" size="3">我现在想想,都觉得以前的自己真的是太拼了.你能想象我在大年三十那天早上,还写了一篇博客嘛;你能想象我在休息日的时候,还坚持读书和写作嘛.在过去的时间里,我得到了很多,但是也忽略了很多.有很多朋友,本来可以玩的更好的,但是因为我一心扑在工作上,所以很多次的邀约都拒绝了,说真的,以前的我和母亲视频都觉得是在浪费时间.<br>可能是因为在我小的时候,经历了那种无力感,那种痛苦,我到现在想起来都会泪流满面.<br>我特别害怕再经历这种事情,所以我就想要抓住一切时间去努力,因为我想让我成功的速度快过亲人老去的速度.<br>过去的一年改变了我的一些想法.观念转变应该是 6 月份和一位朋友的关系出现危机.我挺在乎她的,对我来说,她对我的意义就和家人一样重要,所以当我们之间的距离越来越远的时候,我很害怕,但是却发现我越是想要靠近,我们之间反而越是疏离,以至于到最后我不知道我该怎么做.<br>那段时间,碰巧亲人去世,工作上需要带领项目上线,我的心态崩溃过很多次,我开始怀疑自己这样做的对不对,不知道我努力的意义是什么.如果是让家人过上更好的生活,那我这样对他们不闻不问,几乎没有陪伴,就是对他们好嘛.<br>从那段时间之后,开始寻找工作和生活的一个平衡点.现在我学会了在休息日跑到北京只是为了找一家咖啡厅坐坐放空自己;学会了花费一天的时间去陪伴重要的人,哪怕只是逛逛街吃吃饭,或者是看看电影;学会了一整天都赖在家里,亲手做饭,或者只是在有阳光的午后躺在沙发上;也或者花一天的时间压马路,各种放空心情.<br>我发现当我这样去做之后,失去的固然有,比如技术上的成长,相对来说慢了一些,但是我却得到了很多.<br>在我难过的时候,会有朋友陪在身边;在我怀疑自己的时候,会有人鼓励我说我很棒;当我一心只是想要飞的更高的时候,总有朋友一直叮嘱我去按摩,照顾好自己的身体.</font></p><p><font face="华文中宋" size="3">慢下来之后,我发现原来生活不光光是工作,努力也不是只有一种方式.<br>就像是开窍一般,对发生的所有事情都心怀感恩,感激当下发生的一切.关于这一点,在一篇文章中其实是说过的:<a href="https://www.dynamic-zheng.com/posts/a353dbe7.html">[碎碎念]不知道该起什么题目的一篇文章</a>.<br>接受自己的平凡,承认自己是一个平凡的人,是一件很难的事情.我庆幸,现在的我就做到了,虽然做的不是很好.</font></p><p><font face="华文中宋" size="3">博客印象中是有一两周的时间没有写,以后再也不能说自己坚持每周写一篇博客了,气哭…<br>但是我可以说,一直在坚持写博客呀,哈哈哈哈哈<br>因为博客,认识了一群优秀的人.<br>反正技术这条路,真的是需要活到老,学到老的.</font></p><p><font face="华文中宋" size="3">过去的一年,我只做好了 4 件事:工作,读书,写作,锻炼.<br>说到这里,我突然想起来,前一段时间有人来问我,说我没办法坚持读书,我没办法坚持写作,我没办法坚持锻炼,问我为什么能够坚持下来.其实秘诀只有一个:我有同伴在和我一起同行.<br>有同伴一起同行,真的是一件超级幸福的事情,特别是相处让你觉得很舒服那种.和晓鸿开始真正熟悉,是当时我们一起在外出差,两个女孩子之间互相照顾,慢慢开始了解对方.后来和晓鸿说,要不要一起学习,一起在技术上做深入研究,她说可以.<br>我觉得我和晓鸿是那种,制定了计划,就一定要完成的那种人.所以在 19 年 10 月份的时候,我才敢说在 19 年结束之前,把计算机网络过一遍.和晓鸿一起学习,我们在 12 月份中旬就结束了,用了将近两个月的时间.<br>我说我想去学算法,她二话没说就和我一起学;我说我想去练字,也是二话没说就一起去练了;有一次我想要学一个资料,挺贵的,问她要不要一起学,也是二话没说就入了.有这样一个朋友一起前行,不可能坚持不下去的.</font></p><p><font face="华文中宋" size="3">过去的一年,影响了一些人.<br>我看到因为我自己坚持写博客,导致身边的人也开始写博客的时候;我看到因为我坚持读书,导致身边的人也开始养成读书习惯的时候;我看到因为我为了吃的更加健康,而不怎么吃主食,导致身边的人也开始慢慢不吃主食的时候,那种成就感很大.<br>有一种,哦,原来我也能影响别人,原来我的做法也能帮助一部分人找到他们热爱的事情,这种感觉想想都满脸骄傲.(以后走路横着走,哈哈哈;</font></p><p><font face="华文中宋" size="3">对于接下来的一年,我还是只想做好 4 件事:工作,读书,写作,锻炼.<br>这 4 件事做好了,其他就是享受当下.这样想想,对于接下来的一年,充满的是憧憬和感恩.</font></p><p><font face="华文中宋" size="3">最后感谢,感谢这一路一直帮助我的人,对我来说,他们都是贵人.<br>我也不知道此时的我能给他们带来什么,把这份感激都放在心底,希望有一天,我能让他们拿我来吹牛逼.</font></p><p><font face="华文中宋" size="3">对于我的父母,我一直都很感激,很感谢他们对于我一直都是舍得的.<br>现在能做的就是没事多和他们视视频,聊聊天.每次和母亲视频的时候,都能感受到她是很开心的.</font></p><p><font face="华文中宋" size="3">愿你在以后的黑暗时刻,都能想起我.因为在你黑暗的时刻,你能够想起我说明我对你来说是重要的,我是被需要的,我觉得很荣幸,能够被你当成这样重要的存在.(好吧,我承认我有些标题党了,挺煽情的一个题目,被我写成了碎碎念,逃;<br>如果让您有所收获,倍感荣幸.<br>就是这样了!<br>还有,新年快乐~<br>感谢您的阅读~</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot;&gt;今天是新的一年开始.&lt;br&gt;这次的总结,不想像以前那样细数过去的一年发生了什么,经历了什么,我就随便写了,写到哪儿算哪儿(说白了就是碎碎念&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="https://www.dynamic-zheng.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://www.dynamic-zheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
